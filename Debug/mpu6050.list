
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005428  08005428  00015428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005630  08005630  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005630  08005630  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  080056a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080056a8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061e9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c3  00000000  00000000  00026282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  00027ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c72  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008767  00000000  00000000  0003ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b1b  00000000  00000000  000474c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  000ca02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800540c 	.word	0x0800540c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800540c 	.word	0x0800540c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fdae 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 fc14 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f000 fc82 	bl	80019d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010d4:	f000 fc52 	bl	800197c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  data = 0x00;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <main+0x80>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write (&hi2c1,MPU6050_ADDR,PWR_MGMT_1_REG,1,&data,1,HAL_MAX_DELAY);
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <main+0x80>)
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	226b      	movs	r2, #107	; 0x6b
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <main+0x84>)
 80010f4:	f001 fd4c 	bl	8002b90 <HAL_I2C_Mem_Write>
    data =  0x08;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <main+0x80>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write (&hi2c1,MPU6050_ADDR,GYRO_CNFG_REG,1,&data,1,HAL_MAX_DELAY);
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <main+0x80>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	221b      	movs	r2, #27
 8001110:	21d0      	movs	r1, #208	; 0xd0
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <main+0x84>)
 8001114:	f001 fd3c 	bl	8002b90 <HAL_I2C_Mem_Write>

    data = 0x10;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <main+0x80>)
 800111a:	2210      	movs	r2, #16
 800111c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write (&hi2c1,MPU6050_ADDR,ACC_CNFG_REG,1,&data,1,HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <main+0x80>)
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	221c      	movs	r2, #28
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <main+0x84>)
 8001134:	f001 fd2c 	bl	8002b90 <HAL_I2C_Mem_Write>
    for (i=0;i<2000;i++)
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <main+0x88>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e094      	b.n	800126a <main+0x1aa>
 8001140:	200000e0 	.word	0x200000e0
 8001144:	2000008c 	.word	0x2000008c
 8001148:	20000138 	.word	0x20000138
    {
  	  prevtime2 = time2;
 800114c:	4b9e      	ldr	r3, [pc, #632]	; (80013c8 <main+0x308>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a9e      	ldr	r2, [pc, #632]	; (80013cc <main+0x30c>)
 8001152:	6013      	str	r3, [r2, #0]
  	  time2 = HAL_GetTick();
 8001154:	f000 fdc0 	bl	8001cd8 <HAL_GetTick>
 8001158:	4603      	mov	r3, r0
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fd92 	bl	8000c84 <__aeabi_ui2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4a99      	ldr	r2, [pc, #612]	; (80013c8 <main+0x308>)
 8001164:	6013      	str	r3, [r2, #0]
  	  elapsedtime2 = (time2-prevtime2) *1000;
 8001166:	4b98      	ldr	r3, [pc, #608]	; (80013c8 <main+0x308>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a98      	ldr	r2, [pc, #608]	; (80013cc <main+0x30c>)
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fcd5 	bl	8000b20 <__aeabi_fsub>
 8001176:	4603      	mov	r3, r0
 8001178:	4995      	ldr	r1, [pc, #596]	; (80013d0 <main+0x310>)
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fdda 	bl	8000d34 <__aeabi_fmul>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b93      	ldr	r3, [pc, #588]	; (80013d4 <main+0x314>)
 8001186:	601a      	str	r2, [r3, #0]
  	  cuffer[0]=0x43;
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <main+0x318>)
 800118a:	2243      	movs	r2, #67	; 0x43
 800118c:	701a      	strb	r2, [r3, #0]
  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	4a90      	ldr	r2, [pc, #576]	; (80013d8 <main+0x318>)
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	4890      	ldr	r0, [pc, #576]	; (80013dc <main+0x31c>)
 800119c:	f001 f98e 	bl	80024bc <HAL_I2C_Master_Transmit>
  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2306      	movs	r3, #6
 80011a8:	4a8b      	ldr	r2, [pc, #556]	; (80013d8 <main+0x318>)
 80011aa:	21d0      	movs	r1, #208	; 0xd0
 80011ac:	488b      	ldr	r0, [pc, #556]	; (80013dc <main+0x31c>)
 80011ae:	f001 fa83 	bl	80026b8 <HAL_I2C_Master_Receive>

  	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <main+0x318>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b87      	ldr	r3, [pc, #540]	; (80013d8 <main+0x318>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <main+0x320>)
 80011c6:	801a      	strh	r2, [r3, #0]
  	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 80011c8:	4b83      	ldr	r3, [pc, #524]	; (80013d8 <main+0x318>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <main+0x318>)
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21a      	sxth	r2, r3
 80011da:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <main+0x320>)
 80011dc:	805a      	strh	r2, [r3, #2]
  	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 80011de:	4b7e      	ldr	r3, [pc, #504]	; (80013d8 <main+0x318>)
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b7c      	ldr	r3, [pc, #496]	; (80013d8 <main+0x318>)
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <main+0x320>)
 80011f2:	809a      	strh	r2, [r3, #4]

  	  gyro_cal[0] += gyro_raw[0];
 80011f4:	4b7b      	ldr	r3, [pc, #492]	; (80013e4 <main+0x324>)
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <main+0x320>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fd44 	bl	8000c8c <__aeabi_i2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff fc8b 	bl	8000b24 <__addsf3>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <main+0x324>)
 8001214:	601a      	str	r2, [r3, #0]
  	  gyro_cal[1] += gyro_raw[1];
 8001216:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <main+0x324>)
 8001218:	685c      	ldr	r4, [r3, #4]
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <main+0x320>)
 800121c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd33 	bl	8000c8c <__aeabi_i2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fc7a 	bl	8000b24 <__addsf3>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <main+0x324>)
 8001236:	605a      	str	r2, [r3, #4]
  	  gyro_cal[2] += gyro_raw[2];
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <main+0x324>)
 800123a:	689c      	ldr	r4, [r3, #8]
 800123c:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <main+0x320>)
 800123e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd22 	bl	8000c8c <__aeabi_i2f>
 8001248:	4603      	mov	r3, r0
 800124a:	4619      	mov	r1, r3
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fc69 	bl	8000b24 <__addsf3>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <main+0x324>)
 8001258:	609a      	str	r2, [r3, #8]

  	  HAL_Delay(3);
 800125a:	2003      	movs	r0, #3
 800125c:	f000 fd46 	bl	8001cec <HAL_Delay>
    for (i=0;i<2000;i++)
 8001260:	4b61      	ldr	r3, [pc, #388]	; (80013e8 <main+0x328>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <main+0x328>)
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <main+0x328>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001272:	f6ff af6b 	blt.w	800114c <main+0x8c>

    }
    gyro_cal[0] /=2000;
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <main+0x324>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	495c      	ldr	r1, [pc, #368]	; (80013ec <main+0x32c>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe0d 	bl	8000e9c <__aeabi_fdiv>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <main+0x324>)
 8001288:	601a      	str	r2, [r3, #0]
    gyro_cal[1] /=2000;
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <main+0x324>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	4957      	ldr	r1, [pc, #348]	; (80013ec <main+0x32c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe03 	bl	8000e9c <__aeabi_fdiv>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <main+0x324>)
 800129c:	605a      	str	r2, [r3, #4]
    gyro_cal[2] /=2000;
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <main+0x324>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4952      	ldr	r1, [pc, #328]	; (80013ec <main+0x32c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdf9 	bl	8000e9c <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <main+0x324>)
 80012b0:	609a      	str	r2, [r3, #8]

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
  	  prevtime1 = time1;
 80012b2:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <main+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <main+0x334>)
 80012b8:	6013      	str	r3, [r2, #0]
  	  time1 = HAL_GetTick();
 80012ba:	f000 fd0d 	bl	8001cd8 <HAL_GetTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fcdf 	bl	8000c84 <__aeabi_ui2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <main+0x330>)
 80012ca:	6013      	str	r3, [r2, #0]
  	  elapsedtime1 = (time1-prevtime1) * 1000;
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <main+0x330>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a48      	ldr	r2, [pc, #288]	; (80013f4 <main+0x334>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fc22 	bl	8000b20 <__aeabi_fsub>
 80012dc:	4603      	mov	r3, r0
 80012de:	493c      	ldr	r1, [pc, #240]	; (80013d0 <main+0x310>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd27 	bl	8000d34 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <main+0x338>)
 80012ec:	601a      	str	r2, [r3, #0]
  	  tuffer[0] = 0x38;
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <main+0x33c>)
 80012f0:	2238      	movs	r2, #56	; 0x38
 80012f2:	701a      	strb	r2, [r3, #0]
  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,tuffer,1,HAL_MAX_DELAY);
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	4a3f      	ldr	r2, [pc, #252]	; (80013fc <main+0x33c>)
 80012fe:	21d0      	movs	r1, #208	; 0xd0
 8001300:	4836      	ldr	r0, [pc, #216]	; (80013dc <main+0x31c>)
 8001302:	f001 f8db 	bl	80024bc <HAL_I2C_Master_Transmit>
  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,tuffer,6,HAL_MAX_DELAY);
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2306      	movs	r3, #6
 800130e:	4a3b      	ldr	r2, [pc, #236]	; (80013fc <main+0x33c>)
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <main+0x31c>)
 8001314:	f001 f9d0 	bl	80026b8 <HAL_I2C_Master_Receive>
  	  acc_raw[0] = (tuffer[0] << 8 | tuffer[1]);
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <main+0x33c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <main+0x33c>)
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <main+0x340>)
 800132c:	801a      	strh	r2, [r3, #0]
  	  acc_raw[1] = (tuffer[2] << 8 | tuffer[3]);
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <main+0x33c>)
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <main+0x33c>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <main+0x340>)
 8001342:	805a      	strh	r2, [r3, #2]
  	  acc_raw[2] = (tuffer[4] << 8 | tuffer[5]);
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <main+0x33c>)
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <main+0x33c>)
 800134e:	795b      	ldrb	r3, [r3, #5]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <main+0x340>)
 8001358:	809a      	strh	r2, [r3, #4]

  	  buffer[0]=0x41;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <main+0x344>)
 800135c:	2241      	movs	r2, #65	; 0x41
 800135e:	701a      	strb	r2, [r3, #0]
  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,buffer,1,HAL_MAX_DELAY);
 8001360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	4a26      	ldr	r2, [pc, #152]	; (8001404 <main+0x344>)
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	481b      	ldr	r0, [pc, #108]	; (80013dc <main+0x31c>)
 800136e:	f001 f8a5 	bl	80024bc <HAL_I2C_Master_Transmit>
  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,buffer,2,HAL_MAX_DELAY);
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <main+0x344>)
 800137c:	21d0      	movs	r1, #208	; 0xd0
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <main+0x31c>)
 8001380:	f001 f99a 	bl	80026b8 <HAL_I2C_Master_Receive>

  	  raw_temp =  (buffer[0] << 8 | buffer[1]);
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <main+0x344>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <main+0x344>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <main+0x348>)
 8001398:	801a      	strh	r2, [r3, #0]
  	  temp = (raw_temp / 340.0) + 36.53;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <main+0x348>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f827 	bl	80003f4 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <main+0x34c>)
 80013ac:	f7ff f9b6 	bl	800071c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	a301      	add	r3, pc, #4	; (adr r3, 80013c0 <main+0x300>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	e027      	b.n	8001410 <main+0x350>
 80013c0:	0a3d70a4 	.word	0x0a3d70a4
 80013c4:	404243d7 	.word	0x404243d7
 80013c8:	20000150 	.word	0x20000150
 80013cc:	2000014c 	.word	0x2000014c
 80013d0:	447a0000 	.word	0x447a0000
 80013d4:	20000154 	.word	0x20000154
 80013d8:	200000f0 	.word	0x200000f0
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	200000f8 	.word	0x200000f8
 80013e4:	20000108 	.word	0x20000108
 80013e8:	20000138 	.word	0x20000138
 80013ec:	44fa0000 	.word	0x44fa0000
 80013f0:	20000144 	.word	0x20000144
 80013f4:	20000140 	.word	0x20000140
 80013f8:	20000148 	.word	0x20000148
 80013fc:	200000e8 	.word	0x200000e8
 8001400:	20000100 	.word	0x20000100
 8001404:	200000e4 	.word	0x200000e4
 8001408:	20000130 	.word	0x20000130
 800140c:	40754000 	.word	0x40754000
 8001410:	f7fe fea4 	bl	800015c <__adddf3>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fb2c 	bl	8000a78 <__aeabi_d2f>
 8001420:	4603      	mov	r3, r0
 8001422:	4abf      	ldr	r2, [pc, #764]	; (8001720 <main+0x660>)
 8001424:	6013      	str	r3, [r2, #0]

  	  cuffer[0] = 0x43;
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <main+0x664>)
 8001428:	2243      	movs	r2, #67	; 0x43
 800142a:	701a      	strb	r2, [r3, #0]
  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	4abb      	ldr	r2, [pc, #748]	; (8001724 <main+0x664>)
 8001436:	21d0      	movs	r1, #208	; 0xd0
 8001438:	48bb      	ldr	r0, [pc, #748]	; (8001728 <main+0x668>)
 800143a:	f001 f83f 	bl	80024bc <HAL_I2C_Master_Transmit>
  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2306      	movs	r3, #6
 8001446:	4ab7      	ldr	r2, [pc, #732]	; (8001724 <main+0x664>)
 8001448:	21d0      	movs	r1, #208	; 0xd0
 800144a:	48b7      	ldr	r0, [pc, #732]	; (8001728 <main+0x668>)
 800144c:	f001 f934 	bl	80026b8 <HAL_I2C_Master_Receive>

  	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8001450:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <main+0x664>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	4bb2      	ldr	r3, [pc, #712]	; (8001724 <main+0x664>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	4bb2      	ldr	r3, [pc, #712]	; (800172c <main+0x66c>)
 8001464:	801a      	strh	r2, [r3, #0]
  	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8001466:	4baf      	ldr	r3, [pc, #700]	; (8001724 <main+0x664>)
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	4bad      	ldr	r3, [pc, #692]	; (8001724 <main+0x664>)
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	4bac      	ldr	r3, [pc, #688]	; (800172c <main+0x66c>)
 800147a:	805a      	strh	r2, [r3, #2]
  	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 800147c:	4ba9      	ldr	r3, [pc, #676]	; (8001724 <main+0x664>)
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4ba7      	ldr	r3, [pc, #668]	; (8001724 <main+0x664>)
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	4ba7      	ldr	r3, [pc, #668]	; (800172c <main+0x66c>)
 8001490:	809a      	strh	r2, [r3, #4]

  	  gyro_cal[0] -= gyro_raw[0];
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <main+0x670>)
 8001494:	681c      	ldr	r4, [r3, #0]
 8001496:	4ba5      	ldr	r3, [pc, #660]	; (800172c <main+0x66c>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fbf5 	bl	8000c8c <__aeabi_i2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff fb3a 	bl	8000b20 <__aeabi_fsub>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b9f      	ldr	r3, [pc, #636]	; (8001730 <main+0x670>)
 80014b2:	601a      	str	r2, [r3, #0]
  	  gyro_cal[1] -= gyro_raw[1];
 80014b4:	4b9e      	ldr	r3, [pc, #632]	; (8001730 <main+0x670>)
 80014b6:	685c      	ldr	r4, [r3, #4]
 80014b8:	4b9c      	ldr	r3, [pc, #624]	; (800172c <main+0x66c>)
 80014ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fbe4 	bl	8000c8c <__aeabi_i2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff fb29 	bl	8000b20 <__aeabi_fsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b97      	ldr	r3, [pc, #604]	; (8001730 <main+0x670>)
 80014d4:	605a      	str	r2, [r3, #4]
  	  gyro_cal[2] -= gyro_raw[2];
 80014d6:	4b96      	ldr	r3, [pc, #600]	; (8001730 <main+0x670>)
 80014d8:	689c      	ldr	r4, [r3, #8]
 80014da:	4b94      	ldr	r3, [pc, #592]	; (800172c <main+0x66c>)
 80014dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbd3 	bl	8000c8c <__aeabi_i2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fb18 	bl	8000b20 <__aeabi_fsub>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b8e      	ldr	r3, [pc, #568]	; (8001730 <main+0x670>)
 80014f6:	609a      	str	r2, [r3, #8]
  	  angle_pitch_gyro += gyro_raw[0] * 0.0000611;
 80014f8:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <main+0x674>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff8b 	bl	8000418 <__aeabi_f2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	4b89      	ldr	r3, [pc, #548]	; (800172c <main+0x66c>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe ff71 	bl	80003f4 <__aeabi_i2d>
 8001512:	a37d      	add	r3, pc, #500	; (adr r3, 8001708 <main+0x648>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe ffd6 	bl	80004c8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe fe1a 	bl	800015c <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff faa2 	bl	8000a78 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	4a7f      	ldr	r2, [pc, #508]	; (8001734 <main+0x674>)
 8001538:	6013      	str	r3, [r2, #0]
  	  angle_roll_gyro += gyro_raw[1] * 0.0000611;
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <main+0x678>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff6a 	bl	8000418 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <main+0x66c>)
 800154a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff50 	bl	80003f4 <__aeabi_i2d>
 8001554:	a36c      	add	r3, pc, #432	; (adr r3, 8001708 <main+0x648>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe ffb5 	bl	80004c8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fdf9 	bl	800015c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fa81 	bl	8000a78 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	4a6f      	ldr	r2, [pc, #444]	; (8001738 <main+0x678>)
 800157a:	6013      	str	r3, [r2, #0]
  	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 800157c:	4b6d      	ldr	r3, [pc, #436]	; (8001734 <main+0x674>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ff49 	bl	8000418 <__aeabi_f2d>
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <main+0x678>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff42 	bl	8000418 <__aeabi_f2d>
 8001594:	4680      	mov	r8, r0
 8001596:	4689      	mov	r9, r1
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <main+0x66c>)
 800159a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff28 	bl	80003f4 <__aeabi_i2d>
 80015a4:	a35a      	add	r3, pc, #360	; (adr r3, 8001710 <main+0x650>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe ff8d 	bl	80004c8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f002 fc2f 	bl	8003e18 <sin>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe ff81 	bl	80004c8 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fdc5 	bl	800015c <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa4d 	bl	8000a78 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <main+0x674>)
 80015e2:	6013      	str	r3, [r2, #0]
  	  angle_roll_gyro += angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <main+0x678>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff15 	bl	8000418 <__aeabi_f2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <main+0x674>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff0e 	bl	8000418 <__aeabi_f2d>
 80015fc:	4680      	mov	r8, r0
 80015fe:	4689      	mov	r9, r1
 8001600:	4b4a      	ldr	r3, [pc, #296]	; (800172c <main+0x66c>)
 8001602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fef4 	bl	80003f4 <__aeabi_i2d>
 800160c:	a340      	add	r3, pc, #256	; (adr r3, 8001710 <main+0x650>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe ff59 	bl	80004c8 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f002 fbfb 	bl	8003e18 <sin>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f7fe ff4d 	bl	80004c8 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fd91 	bl	800015c <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa19 	bl	8000a78 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <main+0x678>)
 800164a:	6013      	str	r3, [r2, #0]

  	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0]) + (acc_raw[1] * acc_raw[1]) + (acc_raw[2] * acc_raw[2]));
 800164c:	4b3b      	ldr	r3, [pc, #236]	; (800173c <main+0x67c>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	461a      	mov	r2, r3
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <main+0x67c>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <main+0x67c>)
 8001660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001664:	4619      	mov	r1, r3
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <main+0x67c>)
 8001668:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	441a      	add	r2, r3
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <main+0x67c>)
 8001674:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001678:	4619      	mov	r1, r3
 800167a:	4b30      	ldr	r3, [pc, #192]	; (800173c <main+0x67c>)
 800167c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001680:	fb01 f303 	mul.w	r3, r1, r3
 8001684:	4413      	add	r3, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe feb4 	bl	80003f4 <__aeabi_i2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f002 fc2e 	bl	8003ef4 <sqrt>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff f9c2 	bl	8000a28 <__aeabi_d2iz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <main+0x680>)
 80016aa:	801a      	strh	r2, [r3, #0]

  	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)* 57.296;
 80016ac:	4b23      	ldr	r3, [pc, #140]	; (800173c <main+0x67c>)
 80016ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff faea 	bl	8000c8c <__aeabi_i2f>
 80016b8:	4604      	mov	r4, r0
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <main+0x680>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fae3 	bl	8000c8c <__aeabi_i2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fbe6 	bl	8000e9c <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fea0 	bl	8000418 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f002 fbe0 	bl	8003ea4 <asin>
 80016e4:	a30c      	add	r3, pc, #48	; (adr r3, 8001718 <main+0x658>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe feed 	bl	80004c8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff f9bf 	bl	8000a78 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <main+0x684>)
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e022      	b.n	8001748 <main+0x688>
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	01d41596 	.word	0x01d41596
 800170c:	3f10045a 	.word	0x3f10045a
 8001710:	652c6e62 	.word	0x652c6e62
 8001714:	3eb1e26f 	.word	0x3eb1e26f
 8001718:	53f7ced9 	.word	0x53f7ced9
 800171c:	404ca5e3 	.word	0x404ca5e3
 8001720:	20000134 	.word	0x20000134
 8001724:	200000f0 	.word	0x200000f0
 8001728:	2000008c 	.word	0x2000008c
 800172c:	200000f8 	.word	0x200000f8
 8001730:	20000108 	.word	0x20000108
 8001734:	20000118 	.word	0x20000118
 8001738:	2000011c 	.word	0x2000011c
 800173c:	20000100 	.word	0x20000100
 8001740:	20000114 	.word	0x20000114
 8001744:	20000120 	.word	0x20000120
  	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)* -57.296;
 8001748:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <main+0x808>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa9c 	bl	8000c8c <__aeabi_i2f>
 8001754:	4604      	mov	r4, r0
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <main+0x80c>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fa95 	bl	8000c8c <__aeabi_i2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fb98 	bl	8000e9c <__aeabi_fdiv>
 800176c:	4603      	mov	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe52 	bl	8000418 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f002 fb92 	bl	8003ea4 <asin>
 8001780:	a34b      	add	r3, pc, #300	; (adr r3, 80018b0 <main+0x7f0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe fe9f 	bl	80004c8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f971 	bl	8000a78 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <main+0x810>)
 800179a:	6013      	str	r3, [r2, #0]

  	  angle_pitch_acc -= 0.00;
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <main+0x814>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <main+0x814>)
 80017a2:	6013      	str	r3, [r2, #0]
  	  angle_roll_acc -= 0.00;
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <main+0x810>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <main+0x810>)
 80017aa:	6013      	str	r3, [r2, #0]

  	  if(set_gyro){
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <main+0x818>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d04e      	beq.n	8001852 <main+0x792>
  		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <main+0x81c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe2d 	bl	8000418 <__aeabi_f2d>
 80017be:	a33e      	add	r3, pc, #248	; (adr r3, 80018b8 <main+0x7f8>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe fe80 	bl	80004c8 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <main+0x814>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe1f 	bl	8000418 <__aeabi_f2d>
 80017da:	a339      	add	r3, pc, #228	; (adr r3, 80018c0 <main+0x800>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe fe72 	bl	80004c8 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fcb6 	bl	800015c <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f93e 	bl	8000a78 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <main+0x820>)
 8001800:	6013      	str	r3, [r2, #0]
  		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <main+0x824>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe06 	bl	8000418 <__aeabi_f2d>
 800180c:	a32a      	add	r3, pc, #168	; (adr r3, 80018b8 <main+0x7f8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fe59 	bl	80004c8 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4614      	mov	r4, r2
 800181c:	461d      	mov	r5, r3
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <main+0x810>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fdf8 	bl	8000418 <__aeabi_f2d>
 8001828:	a325      	add	r3, pc, #148	; (adr r3, 80018c0 <main+0x800>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fe4b 	bl	80004c8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fc8f 	bl	800015c <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f917 	bl	8000a78 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <main+0x828>)
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e006      	b.n	8001860 <main+0x7a0>
  	  }else{
  		  angle_pitch = angle_roll_acc;
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0x810>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <main+0x820>)
 8001858:	6013      	str	r3, [r2, #0]
  		  set_gyro = true;
 800185a:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <main+0x818>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]

  	  }
  	  while((HAL_GetTick() - prevtime) *1000 < 4000);
 8001860:	bf00      	nop
 8001862:	f000 fa39 	bl	8001cd8 <HAL_GetTick>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa0b 	bl	8000c84 <__aeabi_ui2f>
 800186e:	4602      	mov	r2, r0
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <main+0x82c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	4610      	mov	r0, r2
 8001878:	f7ff f952 	bl	8000b20 <__aeabi_fsub>
 800187c:	4603      	mov	r3, r0
 800187e:	491c      	ldr	r1, [pc, #112]	; (80018f0 <main+0x830>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa57 	bl	8000d34 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	491a      	ldr	r1, [pc, #104]	; (80018f4 <main+0x834>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fbf0 	bl	8001070 <__aeabi_fcmplt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e5      	bne.n	8001862 <main+0x7a2>
  	  prevtime = HAL_GetTick();
 8001896:	f000 fa1f 	bl	8001cd8 <HAL_GetTick>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f9f1 	bl	8000c84 <__aeabi_ui2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <main+0x82c>)
 80018a6:	6013      	str	r3, [r2, #0]
  	  prevtime1 = time1;
 80018a8:	e503      	b.n	80012b2 <main+0x1f2>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	53f7ced9 	.word	0x53f7ced9
 80018b4:	c04ca5e3 	.word	0xc04ca5e3
 80018b8:	23a29c78 	.word	0x23a29c78
 80018bc:	3feffcb9 	.word	0x3feffcb9
 80018c0:	eb1c432d 	.word	0xeb1c432d
 80018c4:	3f3a36e2 	.word	0x3f3a36e2
 80018c8:	20000100 	.word	0x20000100
 80018cc:	20000114 	.word	0x20000114
 80018d0:	20000124 	.word	0x20000124
 80018d4:	20000120 	.word	0x20000120
 80018d8:	20000158 	.word	0x20000158
 80018dc:	20000118 	.word	0x20000118
 80018e0:	20000128 	.word	0x20000128
 80018e4:	2000011c 	.word	0x2000011c
 80018e8:	2000012c 	.word	0x2000012c
 80018ec:	2000013c 	.word	0x2000013c
 80018f0:	447a0000 	.word	0x447a0000
 80018f4:	457a0000 	.word	0x457a0000

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	2228      	movs	r2, #40	; 0x28
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fa7e 	bl	8003e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191e:	2301      	movs	r3, #1
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001922:	2310      	movs	r3, #16
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	2302      	movs	r3, #2
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800192e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fe3f 	bl	80035bc <HAL_RCC_OscConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001944:	f000 f894 	bl	8001a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001948:	230f      	movs	r3, #15
 800194a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800194c:	2302      	movs	r3, #2
 800194e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f002 f8ac 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800196e:	f000 f87f 	bl	8001a70 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3740      	adds	r7, #64	; 0x40
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_I2C1_Init+0x50>)
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <MX_I2C1_Init+0x54>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_I2C1_Init+0x50>)
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_I2C1_Init+0x58>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_I2C1_Init+0x50>)
 800199a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_I2C1_Init+0x50>)
 80019ba:	f000 fc3b 	bl	8002234 <HAL_I2C_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c4:	f000 f854 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000008c 	.word	0x2000008c
 80019d0:	40005400 	.word	0x40005400
 80019d4:	00061a80 	.word	0x00061a80

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_GPIO_Init+0x90>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <MX_GPIO_Init+0x90>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_GPIO_Init+0x90>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_GPIO_Init+0x90>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0x94>)
 8001a3c:	f000 fbe2 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4619      	mov	r1, r3
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_GPIO_Init+0x94>)
 8001a5a:	f000 fa4f 	bl	8001efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40011000 	.word	0x40011000

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_MspInit+0x60>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_MspInit+0x60>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000

08001ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_I2C_MspInit+0x90>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d132      	bne.n	8001b66 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <HAL_I2C_MspInit+0x98>)
 8001b2e:	f000 f9e5 	bl	8001efc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_I2C_MspInit+0x9c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_I2C_MspInit+0x9c>)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_I2C_MspInit+0x94>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40005400 	.word	0x40005400
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40010000 	.word	0x40010000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc6:	f000 f875 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff fff7 	bl	8001bce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001be2:	490c      	ldr	r1, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf8:	4c09      	ldr	r4, [pc, #36]	; (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f002 f8db 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0a:	f7ff fa59 	bl	80010c0 <main>
  bx lr
 8001c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c18:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8001c1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c20:	20000160 	.word	0x20000160

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_Init+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <HAL_Init+0x28>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f92b 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff ff1a 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f935 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	f000 f90b 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_IncTick+0x20>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	2000015c 	.word	0x2000015c

08001cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_GetTick+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	2000015c 	.word	0x2000015c

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffe0 	bl	8001cd8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e74:	f7ff ff90 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff49 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff5e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffb0 	bl	8001e50 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b08b      	sub	sp, #44	; 0x2c
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0e:	e169      	b.n	80021e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f10:	2201      	movs	r2, #1
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 8158 	bne.w	80021de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a9a      	ldr	r2, [pc, #616]	; (800219c <HAL_GPIO_Init+0x2a0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d05e      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a98      	ldr	r2, [pc, #608]	; (800219c <HAL_GPIO_Init+0x2a0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d875      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f3e:	4a98      	ldr	r2, [pc, #608]	; (80021a0 <HAL_GPIO_Init+0x2a4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d058      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f44:	4a96      	ldr	r2, [pc, #600]	; (80021a0 <HAL_GPIO_Init+0x2a4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d86f      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f4a:	4a96      	ldr	r2, [pc, #600]	; (80021a4 <HAL_GPIO_Init+0x2a8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d052      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f50:	4a94      	ldr	r2, [pc, #592]	; (80021a4 <HAL_GPIO_Init+0x2a8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d869      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f56:	4a94      	ldr	r2, [pc, #592]	; (80021a8 <HAL_GPIO_Init+0x2ac>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d04c      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a92      	ldr	r2, [pc, #584]	; (80021a8 <HAL_GPIO_Init+0x2ac>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d863      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f62:	4a92      	ldr	r2, [pc, #584]	; (80021ac <HAL_GPIO_Init+0x2b0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d046      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
 8001f68:	4a90      	ldr	r2, [pc, #576]	; (80021ac <HAL_GPIO_Init+0x2b0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d85d      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d82a      	bhi.n	8001fc8 <HAL_GPIO_Init+0xcc>
 8001f72:	2b12      	cmp	r3, #18
 8001f74:	d859      	bhi.n	800202a <HAL_GPIO_Init+0x12e>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <HAL_GPIO_Init+0x80>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001fd1 	.word	0x08001fd1
 8001f84:	08001fe3 	.word	0x08001fe3
 8001f88:	08002025 	.word	0x08002025
 8001f8c:	0800202b 	.word	0x0800202b
 8001f90:	0800202b 	.word	0x0800202b
 8001f94:	0800202b 	.word	0x0800202b
 8001f98:	0800202b 	.word	0x0800202b
 8001f9c:	0800202b 	.word	0x0800202b
 8001fa0:	0800202b 	.word	0x0800202b
 8001fa4:	0800202b 	.word	0x0800202b
 8001fa8:	0800202b 	.word	0x0800202b
 8001fac:	0800202b 	.word	0x0800202b
 8001fb0:	0800202b 	.word	0x0800202b
 8001fb4:	0800202b 	.word	0x0800202b
 8001fb8:	0800202b 	.word	0x0800202b
 8001fbc:	0800202b 	.word	0x0800202b
 8001fc0:	08001fd9 	.word	0x08001fd9
 8001fc4:	08001fed 	.word	0x08001fed
 8001fc8:	4a79      	ldr	r2, [pc, #484]	; (80021b0 <HAL_GPIO_Init+0x2b4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fce:	e02c      	b.n	800202a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e029      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e024      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e01f      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e01a      	b.n	800202c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ffe:	2304      	movs	r3, #4
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e013      	b.n	800202c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800200c:	2308      	movs	r3, #8
 800200e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	611a      	str	r2, [r3, #16]
          break;
 8002016:	e009      	b.n	800202c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	615a      	str	r2, [r3, #20]
          break;
 8002022:	e003      	b.n	800202c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x130>
          break;
 800202a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2bff      	cmp	r3, #255	; 0xff
 8002030:	d801      	bhi.n	8002036 <HAL_GPIO_Init+0x13a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	e001      	b.n	800203a <HAL_GPIO_Init+0x13e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d802      	bhi.n	8002048 <HAL_GPIO_Init+0x14c>
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x152>
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	3b08      	subs	r3, #8
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	210f      	movs	r1, #15
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	401a      	ands	r2, r3
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80b1 	beq.w	80021de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_GPIO_Init+0x2b8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_GPIO_Init+0x2bc>)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <HAL_GPIO_Init+0x2c0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_GPIO_Init+0x1ec>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_GPIO_Init+0x2c4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00d      	beq.n	80020e4 <HAL_GPIO_Init+0x1e8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_GPIO_Init+0x2c8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_GPIO_Init+0x1e4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3d      	ldr	r2, [pc, #244]	; (80021c8 <HAL_GPIO_Init+0x2cc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_GPIO_Init+0x1e0>
 80020d8:	2303      	movs	r3, #3
 80020da:	e006      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020dc:	2304      	movs	r3, #4
 80020de:	e004      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_GPIO_Init+0x1ee>
 80020e8:	2300      	movs	r3, #0
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	f002 0203 	and.w	r2, r2, #3
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020fa:	492f      	ldr	r1, [pc, #188]	; (80021b8 <HAL_GPIO_Init+0x2bc>)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	492c      	ldr	r1, [pc, #176]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4928      	ldr	r1, [pc, #160]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800212c:	4013      	ands	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	491e      	ldr	r1, [pc, #120]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002154:	4013      	ands	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4918      	ldr	r1, [pc, #96]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4914      	ldr	r1, [pc, #80]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d021      	beq.n	80021d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e021      	b.n	80021de <HAL_GPIO_Init+0x2e2>
 800219a:	bf00      	nop
 800219c:	10320000 	.word	0x10320000
 80021a0:	10310000 	.word	0x10310000
 80021a4:	10220000 	.word	0x10220000
 80021a8:	10210000 	.word	0x10210000
 80021ac:	10120000 	.word	0x10120000
 80021b0:	10110000 	.word	0x10110000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40010800 	.word	0x40010800
 80021c0:	40010c00 	.word	0x40010c00
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40011400 	.word	0x40011400
 80021cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_GPIO_Init+0x304>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4909      	ldr	r1, [pc, #36]	; (8002200 <HAL_GPIO_Init+0x304>)
 80021da:	4013      	ands	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	3301      	adds	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f47f ae8e 	bne.w	8001f10 <HAL_GPIO_Init+0x14>
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	372c      	adds	r7, #44	; 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fc40 	bl	8001ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f001 fd5a 	bl	8003d50 <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	461a      	mov	r2, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	817b      	strh	r3, [r7, #10]
 80024cc:	4613      	mov	r3, r2
 80024ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff fc02 	bl	8001cd8 <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 80e0 	bne.w	80026a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2319      	movs	r3, #25
 80024ea:	2201      	movs	r2, #1
 80024ec:	4970      	ldr	r1, [pc, #448]	; (80026b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fe2e 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0d3      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2C_Master_Transmit+0x50>
 8002508:	2302      	movs	r3, #2
 800250a:	e0cc      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d007      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2210      	movs	r2, #16
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002574:	8979      	ldrh	r1, [r7, #10]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fc02 	bl	8002d84 <I2C_MasterRequestWrite>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e08d      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025a0:	e066      	b.n	8002670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 feec 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d107      	bne.n	80025ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06b      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b04      	cmp	r3, #4
 800260a:	d11b      	bne.n	8002644 <HAL_I2C_Master_Transmit+0x188>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d017      	beq.n	8002644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	6a39      	ldr	r1, [r7, #32]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fee3 	bl	8003414 <I2C_WaitOnBTFFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e01a      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d194      	bne.n	80025a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	00100002 	.word	0x00100002
 80026b4:	ffff0000 	.word	0xffff0000

080026b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	817b      	strh	r3, [r7, #10]
 80026c8:	4613      	mov	r3, r2
 80026ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fb02 	bl	8001cd8 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f040 824b 	bne.w	8002b7a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2319      	movs	r3, #25
 80026ea:	2201      	movs	r2, #1
 80026ec:	497f      	ldr	r1, [pc, #508]	; (80028ec <HAL_I2C_Master_Receive+0x234>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd2e 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e23e      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2C_Master_Receive+0x54>
 8002708:	2302      	movs	r3, #2
 800270a:	e237      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d007      	beq.n	8002732 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2222      	movs	r2, #34	; 0x22
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a5f      	ldr	r2, [pc, #380]	; (80028f0 <HAL_I2C_Master_Receive+0x238>)
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb84 	bl	8002e88 <I2C_MasterRequestRead>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e1f8      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	2b00      	cmp	r3, #0
 8002790:	d113      	bne.n	80027ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e1cc      	b.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d11e      	bne.n	8002800 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d2:	b672      	cpsid	i
}
 80027d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027fc:	b662      	cpsie	i
}
 80027fe:	e035      	b.n	800286c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b02      	cmp	r3, #2
 8002806:	d11e      	bne.n	8002846 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002842:	b662      	cpsie	i
}
 8002844:	e012      	b.n	800286c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800286c:	e172      	b.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	2b03      	cmp	r3, #3
 8002874:	f200 811f 	bhi.w	8002ab6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b01      	cmp	r3, #1
 800287e:	d123      	bne.n	80028c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fe0d 	bl	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e173      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c6:	e145      	b.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d152      	bne.n	8002976 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	4906      	ldr	r1, [pc, #24]	; (80028f4 <HAL_I2C_Master_Receive+0x23c>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fc38 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e148      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
 80028ea:	bf00      	nop
 80028ec:	00100002 	.word	0x00100002
 80028f0:	ffff0000 	.word	0xffff0000
 80028f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
}
 80028fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800293e:	b662      	cpsie	i
}
 8002940:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002974:	e0ee      	b.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	4981      	ldr	r1, [pc, #516]	; (8002b84 <HAL_I2C_Master_Receive+0x4cc>)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fbe5 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0f5      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029d6:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <HAL_I2C_Master_Receive+0x4d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	4a6b      	ldr	r2, [pc, #428]	; (8002b8c <HAL_I2C_Master_Receive+0x4d4>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a1a      	lsrs	r2, r3, #8
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00da      	lsls	r2, r3, #3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d118      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a1e:	b662      	cpsie	i
}
 8002a20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0a6      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d1d9      	bne.n	80029f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i
}
 8002a80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab4:	e04e      	b.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fcf2 	bl	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e058      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d124      	bne.n	8002b54 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f ae88 	bne.w	800286e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	00010004 	.word	0x00010004
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	14f8b589 	.word	0x14f8b589

08002b90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002baa:	f7ff f895 	bl	8001cd8 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f040 80d9 	bne.w	8002d70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	496d      	ldr	r1, [pc, #436]	; (8002d7c <HAL_I2C_Mem_Write+0x1ec>)
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fac1 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0cc      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Mem_Write+0x56>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0c5      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	; 0x21
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a4d      	ldr	r2, [pc, #308]	; (8002d80 <HAL_I2C_Mem_Write+0x1f0>)
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c4e:	88f8      	ldrh	r0, [r7, #6]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f9e0 	bl	8003024 <I2C_RequestMemoryWrite>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d052      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e081      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fb86 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d107      	bne.n	8002c96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11b      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x180>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1aa      	bne.n	8002c6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fb79 	bl	8003414 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e016      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00100002 	.word	0x00100002
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d006      	beq.n	8002dae <I2C_MasterRequestWrite+0x2a>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d003      	beq.n	8002dae <I2C_MasterRequestWrite+0x2a>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dac:	d108      	bne.n	8002dc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e00b      	b.n	8002dd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	2b12      	cmp	r3, #18
 8002dc6:	d107      	bne.n	8002dd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f9b3 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d103      	bne.n	8002e08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e035      	b.n	8002e78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e14:	d108      	bne.n	8002e28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	e01b      	b.n	8002e60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	11db      	asrs	r3, r3, #7
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0306 	and.w	r3, r3, #6
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f063 030f 	orn	r3, r3, #15
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <I2C_MasterRequestWrite+0xfc>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f9fc 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e010      	b.n	8002e78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <I2C_MasterRequestWrite+0x100>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9ec 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	00010008 	.word	0x00010008
 8002e84:	00010002 	.word	0x00010002

08002e88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d006      	beq.n	8002ec2 <I2C_MasterRequestRead+0x3a>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d003      	beq.n	8002ec2 <I2C_MasterRequestRead+0x3a>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ec0:	d108      	bne.n	8002ed4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e00b      	b.n	8002eec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	2b11      	cmp	r3, #17
 8002eda:	d107      	bne.n	8002eec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f929 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d103      	bne.n	8002f1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e079      	b.n	8003014 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f28:	d108      	bne.n	8002f3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	e05f      	b.n	8002ffc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	11db      	asrs	r3, r3, #7
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0306 	and.w	r3, r3, #6
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f063 030f 	orn	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4930      	ldr	r1, [pc, #192]	; (800301c <I2C_MasterRequestRead+0x194>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f972 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e054      	b.n	8003014 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4929      	ldr	r1, [pc, #164]	; (8003020 <I2C_MasterRequestRead+0x198>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f962 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e044      	b.n	8003014 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8c7 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd6:	d103      	bne.n	8002fe0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e017      	b.n	8003014 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	11db      	asrs	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f063 030e 	orn	r3, r3, #14
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <I2C_MasterRequestRead+0x198>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f91e 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	00010008 	.word	0x00010008
 8003020:	00010002 	.word	0x00010002

08003024 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	4608      	mov	r0, r1
 800302e:	4611      	mov	r1, r2
 8003030:	461a      	mov	r2, r3
 8003032:	4603      	mov	r3, r0
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	460b      	mov	r3, r1
 8003038:	813b      	strh	r3, [r7, #8]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2200      	movs	r2, #0
 8003056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f878 	bl	8003150 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d103      	bne.n	800307e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e05f      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003090:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	492d      	ldr	r1, [pc, #180]	; (800314c <I2C_RequestMemoryWrite+0x128>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8d3 	bl	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04c      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	6a39      	ldr	r1, [r7, #32]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f95e 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00d      	beq.n	80030ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d107      	bne.n	80030e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e02b      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e021      	b.n	8003140 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b29b      	uxth	r3, r3
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f938 	bl	8003384 <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003130:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e005      	b.n	8003142 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003136:	893b      	ldrh	r3, [r7, #8]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	00010002 	.word	0x00010002

08003150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003160:	e048      	b.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003168:	d044      	beq.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fdb5 	bl	8001cd8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d139      	bne.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10d      	bne.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	43da      	mvns	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	e00c      	b.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d116      	bne.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e023      	b.n	800323c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10d      	bne.n	800321a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	43da      	mvns	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	e00c      	b.n	8003234 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	43da      	mvns	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4013      	ands	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	429a      	cmp	r2, r3
 8003238:	d093      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003252:	e071      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d123      	bne.n	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0204 	orr.w	r2, r3, #4
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e067      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b2:	d041      	beq.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7fe fd10 	bl	8001cd8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d136      	bne.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10c      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	e00b      	b.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	43da      	mvns	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e021      	b.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10c      	bne.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e00b      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f af6d 	bne.w	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8e3 	bl	800355e <I2C_IsAcknowledgeFailed>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e034      	b.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a8:	d028      	beq.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fc95 	bl	8001cd8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11d      	bne.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d016      	beq.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e007      	b.n	800340c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d1c3      	bne.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f89b 	bl	800355e <I2C_IsAcknowledgeFailed>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e034      	b.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003438:	d028      	beq.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fc4d 	bl	8001cd8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d11d      	bne.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d016      	beq.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e007      	b.n	800349c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d1c3      	bne.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b0:	e049      	b.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d119      	bne.n	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0210 	mvn.w	r2, #16
 80034c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e030      	b.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f4:	f7fe fbf0 	bl	8001cd8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d016      	beq.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d1ae      	bne.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d11b      	bne.n	80035ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0204 	orr.w	r2, r3, #4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e272      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8087 	beq.w	80036ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035dc:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d00c      	beq.n	8003602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035e8:	4b8f      	ldr	r3, [pc, #572]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d112      	bne.n	800361a <HAL_RCC_OscConfig+0x5e>
 80035f4:	4b8c      	ldr	r3, [pc, #560]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d10b      	bne.n	800361a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003602:	4b89      	ldr	r3, [pc, #548]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d06c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x12c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d168      	bne.n	80036e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e24c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x76>
 8003624:	4b80      	ldr	r3, [pc, #512]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a7f      	ldr	r2, [pc, #508]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e02e      	b.n	8003690 <HAL_RCC_OscConfig+0xd4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x98>
 800363a:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a7a      	ldr	r2, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b78      	ldr	r3, [pc, #480]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a77      	ldr	r2, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xd4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0xbc>
 800365e:	4b72      	ldr	r3, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a71      	ldr	r2, [pc, #452]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b6f      	ldr	r3, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xd4>
 8003678:	4b6b      	ldr	r3, [pc, #428]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a6a      	ldr	r2, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b68      	ldr	r3, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a67      	ldr	r2, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fb1e 	bl	8001cd8 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fb1a 	bl	8001cd8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e200      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b5d      	ldr	r3, [pc, #372]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xe4>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fb0a 	bl	8001cd8 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fb06 	bl	8001cd8 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1ec      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x10c>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036f6:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x18c>
 800370e:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x176>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1c0      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4939      	ldr	r1, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <HAL_RCC_OscConfig+0x270>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fabf 	bl	8001cd8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375e:	f7fe fabb 	bl	8001cd8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1a1      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4927      	ldr	r1, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <HAL_RCC_OscConfig+0x270>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fa9e 	bl	8001cd8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fe fa9a 	bl	8001cd8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e180      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d03a      	beq.n	8003840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d019      	beq.n	8003806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_RCC_OscConfig+0x274>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fa7e 	bl	8001cd8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe fa7a 	bl	8001cd8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e160      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037fe:	2001      	movs	r0, #1
 8003800:	f000 faba 	bl	8003d78 <RCC_Delay>
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x274>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380c:	f7fe fa64 	bl	8001cd8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003812:	e00f      	b.n	8003834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe fa60 	bl	8001cd8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d908      	bls.n	8003834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e146      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	42420000 	.word	0x42420000
 8003830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e9      	bne.n	8003814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80a6 	beq.w	800399a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b8b      	ldr	r3, [pc, #556]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b88      	ldr	r3, [pc, #544]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4a87      	ldr	r2, [pc, #540]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	61d3      	str	r3, [r2, #28]
 800386a:	4b85      	ldr	r3, [pc, #532]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b82      	ldr	r3, [pc, #520]	; (8003a84 <HAL_RCC_OscConfig+0x4c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d118      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <HAL_RCC_OscConfig+0x4c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7e      	ldr	r2, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x4c8>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fe fa21 	bl	8001cd8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fe fa1d 	bl	8001cd8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b64      	cmp	r3, #100	; 0x64
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e103      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	4b75      	ldr	r3, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x4c8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <HAL_RCC_OscConfig+0x312>
 80038c0:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6213      	str	r3, [r2, #32]
 80038cc:	e02d      	b.n	800392a <HAL_RCC_OscConfig+0x36e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x334>
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a69      	ldr	r2, [pc, #420]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a66      	ldr	r2, [pc, #408]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
 80038ee:	e01c      	b.n	800392a <HAL_RCC_OscConfig+0x36e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d10c      	bne.n	8003912 <HAL_RCC_OscConfig+0x356>
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a60      	ldr	r2, [pc, #384]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	6213      	str	r3, [r2, #32]
 8003904:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a5d      	ldr	r2, [pc, #372]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e00b      	b.n	800392a <HAL_RCC_OscConfig+0x36e>
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4a5a      	ldr	r2, [pc, #360]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6213      	str	r3, [r2, #32]
 800391e:	4b58      	ldr	r3, [pc, #352]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a57      	ldr	r2, [pc, #348]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d015      	beq.n	800395e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fe f9d1 	bl	8001cd8 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe f9cd 	bl	8001cd8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0b1      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	4b4b      	ldr	r3, [pc, #300]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ee      	beq.n	800393a <HAL_RCC_OscConfig+0x37e>
 800395c:	e014      	b.n	8003988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fe f9bb 	bl	8001cd8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fe f9b7 	bl	8001cd8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e09b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ee      	bne.n	8003966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d105      	bne.n	800399a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398e:	4b3c      	ldr	r3, [pc, #240]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8087 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d061      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d146      	bne.n	8003a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe f98b 	bl	8001cd8 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe f987 	bl	8001cd8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e06d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4921      	ldr	r1, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a19      	ldr	r1, [r3, #32]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	430b      	orrs	r3, r1
 8003a12:	491b      	ldr	r1, [pc, #108]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe f95b 	bl	8001cd8 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a26:	f7fe f957 	bl	8001cd8 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e03d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x46a>
 8003a44:	e035      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f944 	bl	8001cd8 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fe f940 	bl	8001cd8 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e026      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x498>
 8003a72:	e01e      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e019      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40007000 	.word	0x40007000
 8003a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x500>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0d0      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4965      	ldr	r1, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d040      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d115      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e073      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06b      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4936      	ldr	r1, [pc, #216]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe f892 	bl	8001cd8 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe f88e 	bl	8001cd8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e053      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d210      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4922      	ldr	r1, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1cc>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1d0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fff0 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08005428 	.word	0x08005428
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	20000004 	.word	0x20000004

08003c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x36>
 8003cc2:	e027      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cc6:	613b      	str	r3, [r7, #16]
      break;
 8003cc8:	e027      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	0c9b      	lsrs	r3, r3, #18
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d010      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	0c5b      	lsrs	r3, r3, #17
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cee:	5cd3      	ldrb	r3, [r2, r3]
 8003cf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf6:	fb03 f202 	mul.w	r2, r3, r2
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e004      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d16:	613b      	str	r3, [r7, #16]
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	693b      	ldr	r3, [r7, #16]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	08005440 	.word	0x08005440
 8003d34:	08005450 	.word	0x08005450
 8003d38:	003d0900 	.word	0x003d0900

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b02      	ldr	r3, [pc, #8]	; (8003d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000000 	.word	0x20000000

08003d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d54:	f7ff fff2 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08005438 	.word	0x08005438

08003d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <RCC_Delay+0x34>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <RCC_Delay+0x38>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0a5b      	lsrs	r3, r3, #9
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d94:	bf00      	nop
  }
  while (Delay --);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1e5a      	subs	r2, r3, #1
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f9      	bne.n	8003d94 <RCC_Delay+0x1c>
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	20000000 	.word	0x20000000
 8003db0:	10624dd3 	.word	0x10624dd3

08003db4 <__errno>:
 8003db4:	4b01      	ldr	r3, [pc, #4]	; (8003dbc <__errno+0x8>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	; (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1b64      	subs	r4, r4, r5
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	f001 fb1c 	bl	800540c <_init>
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	4d0a      	ldr	r5, [pc, #40]	; (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	; (8003e04 <__libc_init_array+0x44>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08005630 	.word	0x08005630
 8003dfc:	08005630 	.word	0x08005630
 8003e00:	08005630 	.word	0x08005630
 8003e04:	08005634 	.word	0x08005634

08003e08 <memset>:
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4402      	add	r2, r0
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d100      	bne.n	8003e12 <memset+0xa>
 8003e10:	4770      	bx	lr
 8003e12:	f803 1b01 	strb.w	r1, [r3], #1
 8003e16:	e7f9      	b.n	8003e0c <memset+0x4>

08003e18 <sin>:
 8003e18:	b530      	push	{r4, r5, lr}
 8003e1a:	4a20      	ldr	r2, [pc, #128]	; (8003e9c <sin+0x84>)
 8003e1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e20:	4293      	cmp	r3, r2
 8003e22:	b087      	sub	sp, #28
 8003e24:	dc06      	bgt.n	8003e34 <sin+0x1c>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2200      	movs	r2, #0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f001 f92b 	bl	8005088 <__kernel_sin>
 8003e32:	e006      	b.n	8003e42 <sin+0x2a>
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <sin+0x88>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	dd05      	ble.n	8003e46 <sin+0x2e>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	f7fc f98b 	bl	8000158 <__aeabi_dsub>
 8003e42:	b007      	add	sp, #28
 8003e44:	bd30      	pop	{r4, r5, pc}
 8003e46:	aa02      	add	r2, sp, #8
 8003e48:	f000 fa76 	bl	8004338 <__ieee754_rem_pio2>
 8003e4c:	f000 0003 	and.w	r0, r0, #3
 8003e50:	2801      	cmp	r0, #1
 8003e52:	d009      	beq.n	8003e68 <sin+0x50>
 8003e54:	2802      	cmp	r0, #2
 8003e56:	d00e      	beq.n	8003e76 <sin+0x5e>
 8003e58:	b9c0      	cbnz	r0, 8003e8c <sin+0x74>
 8003e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e66:	e7e2      	b.n	8003e2e <sin+0x16>
 8003e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e70:	f000 fd0a 	bl	8004888 <__kernel_cos>
 8003e74:	e7e5      	b.n	8003e42 <sin+0x2a>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e82:	f001 f901 	bl	8005088 <__kernel_sin>
 8003e86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003e8a:	e7da      	b.n	8003e42 <sin+0x2a>
 8003e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e94:	f000 fcf8 	bl	8004888 <__kernel_cos>
 8003e98:	e7f5      	b.n	8003e86 <sin+0x6e>
 8003e9a:	bf00      	nop
 8003e9c:	3fe921fb 	.word	0x3fe921fb
 8003ea0:	7fefffff 	.word	0x7fefffff

08003ea4 <asin>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	f000 f849 	bl	8003f40 <__ieee754_asin>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	460f      	mov	r7, r1
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fc fd9f 	bl	80009fc <__aeabi_dcmpun>
 8003ebe:	b988      	cbnz	r0, 8003ee4 <asin+0x40>
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f001 f996 	bl	80051f4 <fabs>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <asin+0x48>)
 8003ecc:	f7fc fd8c 	bl	80009e8 <__aeabi_dcmpgt>
 8003ed0:	b140      	cbz	r0, 8003ee4 <asin+0x40>
 8003ed2:	f7ff ff6f 	bl	8003db4 <__errno>
 8003ed6:	2321      	movs	r3, #33	; 0x21
 8003ed8:	6003      	str	r3, [r0, #0]
 8003eda:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <asin+0x4c>)
 8003edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ee0:	f001 ba0e 	b.w	8005300 <nan>
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	3ff00000 	.word	0x3ff00000
 8003ef0:	08005452 	.word	0x08005452

08003ef4 <sqrt>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	460f      	mov	r7, r1
 8003efa:	f000 fc15 	bl	8004728 <__ieee754_sqrt>
 8003efe:	4632      	mov	r2, r6
 8003f00:	4604      	mov	r4, r0
 8003f02:	460d      	mov	r5, r1
 8003f04:	463b      	mov	r3, r7
 8003f06:	4630      	mov	r0, r6
 8003f08:	4639      	mov	r1, r7
 8003f0a:	f7fc fd77 	bl	80009fc <__aeabi_dcmpun>
 8003f0e:	b990      	cbnz	r0, 8003f36 <sqrt+0x42>
 8003f10:	2200      	movs	r2, #0
 8003f12:	2300      	movs	r3, #0
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc fd48 	bl	80009ac <__aeabi_dcmplt>
 8003f1c:	b158      	cbz	r0, 8003f36 <sqrt+0x42>
 8003f1e:	f7ff ff49 	bl	8003db4 <__errno>
 8003f22:	2321      	movs	r3, #33	; 0x21
 8003f24:	2200      	movs	r2, #0
 8003f26:	6003      	str	r3, [r0, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7fc fbf5 	bl	800071c <__aeabi_ddiv>
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f3c:	0000      	movs	r0, r0
	...

08003f40 <__ieee754_asin>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	4bc4      	ldr	r3, [pc, #784]	; (8004258 <__ieee754_asin+0x318>)
 8003f46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	429e      	cmp	r6, r3
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4604      	mov	r4, r0
 8003f52:	460d      	mov	r5, r1
 8003f54:	9105      	str	r1, [sp, #20]
 8003f56:	dd29      	ble.n	8003fac <__ieee754_asin+0x6c>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8003f5e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003f62:	4333      	orrs	r3, r6
 8003f64:	d114      	bne.n	8003f90 <__ieee754_asin+0x50>
 8003f66:	a3a2      	add	r3, pc, #648	; (adr r3, 80041f0 <__ieee754_asin+0x2b0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc faac 	bl	80004c8 <__aeabi_dmul>
 8003f70:	a3a1      	add	r3, pc, #644	; (adr r3, 80041f8 <__ieee754_asin+0x2b8>)
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	4606      	mov	r6, r0
 8003f78:	460f      	mov	r7, r1
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	f7fc faa3 	bl	80004c8 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4630      	mov	r0, r6
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f7fc f8e7 	bl	800015c <__adddf3>
 8003f8e:	e006      	b.n	8003f9e <__ieee754_asin+0x5e>
 8003f90:	460b      	mov	r3, r1
 8003f92:	f7fc f8e1 	bl	8000158 <__aeabi_dsub>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	f7fc fbbf 	bl	800071c <__aeabi_ddiv>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	b007      	add	sp, #28
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	4bab      	ldr	r3, [pc, #684]	; (800425c <__ieee754_asin+0x31c>)
 8003fae:	429e      	cmp	r6, r3
 8003fb0:	dc0e      	bgt.n	8003fd0 <__ieee754_asin+0x90>
 8003fb2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003fb6:	f280 80ab 	bge.w	8004110 <__ieee754_asin+0x1d0>
 8003fba:	a391      	add	r3, pc, #580	; (adr r3, 8004200 <__ieee754_asin+0x2c0>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc f8cc 	bl	800015c <__adddf3>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4ba6      	ldr	r3, [pc, #664]	; (8004260 <__ieee754_asin+0x320>)
 8003fc8:	f7fc fd0e 	bl	80009e8 <__aeabi_dcmpgt>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1e8      	bne.n	8003fa2 <__ieee754_asin+0x62>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f001 f90e 	bl	80051f4 <fabs>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	2000      	movs	r0, #0
 8003fde:	49a0      	ldr	r1, [pc, #640]	; (8004260 <__ieee754_asin+0x320>)
 8003fe0:	f7fc f8ba 	bl	8000158 <__aeabi_dsub>
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4b9f      	ldr	r3, [pc, #636]	; (8004264 <__ieee754_asin+0x324>)
 8003fe8:	f7fc fa6e 	bl	80004c8 <__aeabi_dmul>
 8003fec:	a386      	add	r3, pc, #536	; (adr r3, 8004208 <__ieee754_asin+0x2c8>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	f7fc fa67 	bl	80004c8 <__aeabi_dmul>
 8003ffa:	a385      	add	r3, pc, #532	; (adr r3, 8004210 <__ieee754_asin+0x2d0>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc f8ac 	bl	800015c <__adddf3>
 8004004:	4622      	mov	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	f7fc fa5e 	bl	80004c8 <__aeabi_dmul>
 800400c:	a382      	add	r3, pc, #520	; (adr r3, 8004218 <__ieee754_asin+0x2d8>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8a1 	bl	8000158 <__aeabi_dsub>
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f7fc fa55 	bl	80004c8 <__aeabi_dmul>
 800401e:	a380      	add	r3, pc, #512	; (adr r3, 8004220 <__ieee754_asin+0x2e0>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f89a 	bl	800015c <__adddf3>
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	f7fc fa4c 	bl	80004c8 <__aeabi_dmul>
 8004030:	a37d      	add	r3, pc, #500	; (adr r3, 8004228 <__ieee754_asin+0x2e8>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc f88f 	bl	8000158 <__aeabi_dsub>
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f7fc fa43 	bl	80004c8 <__aeabi_dmul>
 8004042:	a37b      	add	r3, pc, #492	; (adr r3, 8004230 <__ieee754_asin+0x2f0>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc f888 	bl	800015c <__adddf3>
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	f7fc fa3a 	bl	80004c8 <__aeabi_dmul>
 8004054:	a378      	add	r3, pc, #480	; (adr r3, 8004238 <__ieee754_asin+0x2f8>)
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	e9cd 0100 	strd	r0, r1, [sp]
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc fa31 	bl	80004c8 <__aeabi_dmul>
 8004066:	a376      	add	r3, pc, #472	; (adr r3, 8004240 <__ieee754_asin+0x300>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f7fc f874 	bl	8000158 <__aeabi_dsub>
 8004070:	4622      	mov	r2, r4
 8004072:	462b      	mov	r3, r5
 8004074:	f7fc fa28 	bl	80004c8 <__aeabi_dmul>
 8004078:	a373      	add	r3, pc, #460	; (adr r3, 8004248 <__ieee754_asin+0x308>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc f86d 	bl	800015c <__adddf3>
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f7fc fa1f 	bl	80004c8 <__aeabi_dmul>
 800408a:	a371      	add	r3, pc, #452	; (adr r3, 8004250 <__ieee754_asin+0x310>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc f862 	bl	8000158 <__aeabi_dsub>
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	f7fc fa16 	bl	80004c8 <__aeabi_dmul>
 800409c:	4b70      	ldr	r3, [pc, #448]	; (8004260 <__ieee754_asin+0x320>)
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fc f85c 	bl	800015c <__adddf3>
 80040a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040a8:	4620      	mov	r0, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	f000 fb3c 	bl	8004728 <__ieee754_sqrt>
 80040b0:	4b6d      	ldr	r3, [pc, #436]	; (8004268 <__ieee754_asin+0x328>)
 80040b2:	4682      	mov	sl, r0
 80040b4:	429e      	cmp	r6, r3
 80040b6:	468b      	mov	fp, r1
 80040b8:	f340 80d8 	ble.w	800426c <__ieee754_asin+0x32c>
 80040bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c4:	f7fc fb2a 	bl	800071c <__aeabi_ddiv>
 80040c8:	4652      	mov	r2, sl
 80040ca:	465b      	mov	r3, fp
 80040cc:	f7fc f9fc 	bl	80004c8 <__aeabi_dmul>
 80040d0:	4652      	mov	r2, sl
 80040d2:	465b      	mov	r3, fp
 80040d4:	f7fc f842 	bl	800015c <__adddf3>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	f7fc f83e 	bl	800015c <__adddf3>
 80040e0:	a345      	add	r3, pc, #276	; (adr r3, 80041f8 <__ieee754_asin+0x2b8>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc f837 	bl	8000158 <__aeabi_dsub>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	a140      	add	r1, pc, #256	; (adr r1, 80041f0 <__ieee754_asin+0x2b0>)
 80040f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040f4:	f7fc f830 	bl	8000158 <__aeabi_dsub>
 80040f8:	9b05      	ldr	r3, [sp, #20]
 80040fa:	4604      	mov	r4, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bfdc      	itt	le
 8004100:	4602      	movle	r2, r0
 8004102:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8004106:	460d      	mov	r5, r1
 8004108:	bfdc      	itt	le
 800410a:	4614      	movle	r4, r2
 800410c:	461d      	movle	r5, r3
 800410e:	e748      	b.n	8003fa2 <__ieee754_asin+0x62>
 8004110:	460b      	mov	r3, r1
 8004112:	f7fc f9d9 	bl	80004c8 <__aeabi_dmul>
 8004116:	a33c      	add	r3, pc, #240	; (adr r3, 8004208 <__ieee754_asin+0x2c8>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	4606      	mov	r6, r0
 800411e:	460f      	mov	r7, r1
 8004120:	f7fc f9d2 	bl	80004c8 <__aeabi_dmul>
 8004124:	a33a      	add	r3, pc, #232	; (adr r3, 8004210 <__ieee754_asin+0x2d0>)
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	f7fc f817 	bl	800015c <__adddf3>
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	f7fc f9c9 	bl	80004c8 <__aeabi_dmul>
 8004136:	a338      	add	r3, pc, #224	; (adr r3, 8004218 <__ieee754_asin+0x2d8>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f7fc f80c 	bl	8000158 <__aeabi_dsub>
 8004140:	4632      	mov	r2, r6
 8004142:	463b      	mov	r3, r7
 8004144:	f7fc f9c0 	bl	80004c8 <__aeabi_dmul>
 8004148:	a335      	add	r3, pc, #212	; (adr r3, 8004220 <__ieee754_asin+0x2e0>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f805 	bl	800015c <__adddf3>
 8004152:	4632      	mov	r2, r6
 8004154:	463b      	mov	r3, r7
 8004156:	f7fc f9b7 	bl	80004c8 <__aeabi_dmul>
 800415a:	a333      	add	r3, pc, #204	; (adr r3, 8004228 <__ieee754_asin+0x2e8>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fb fffa 	bl	8000158 <__aeabi_dsub>
 8004164:	4632      	mov	r2, r6
 8004166:	463b      	mov	r3, r7
 8004168:	f7fc f9ae 	bl	80004c8 <__aeabi_dmul>
 800416c:	a330      	add	r3, pc, #192	; (adr r3, 8004230 <__ieee754_asin+0x2f0>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fb fff3 	bl	800015c <__adddf3>
 8004176:	4632      	mov	r2, r6
 8004178:	463b      	mov	r3, r7
 800417a:	f7fc f9a5 	bl	80004c8 <__aeabi_dmul>
 800417e:	a32e      	add	r3, pc, #184	; (adr r3, 8004238 <__ieee754_asin+0x2f8>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	4680      	mov	r8, r0
 8004186:	4689      	mov	r9, r1
 8004188:	4630      	mov	r0, r6
 800418a:	4639      	mov	r1, r7
 800418c:	f7fc f99c 	bl	80004c8 <__aeabi_dmul>
 8004190:	a32b      	add	r3, pc, #172	; (adr r3, 8004240 <__ieee754_asin+0x300>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fb ffdf 	bl	8000158 <__aeabi_dsub>
 800419a:	4632      	mov	r2, r6
 800419c:	463b      	mov	r3, r7
 800419e:	f7fc f993 	bl	80004c8 <__aeabi_dmul>
 80041a2:	a329      	add	r3, pc, #164	; (adr r3, 8004248 <__ieee754_asin+0x308>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fb ffd8 	bl	800015c <__adddf3>
 80041ac:	4632      	mov	r2, r6
 80041ae:	463b      	mov	r3, r7
 80041b0:	f7fc f98a 	bl	80004c8 <__aeabi_dmul>
 80041b4:	a326      	add	r3, pc, #152	; (adr r3, 8004250 <__ieee754_asin+0x310>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fb ffcd 	bl	8000158 <__aeabi_dsub>
 80041be:	4632      	mov	r2, r6
 80041c0:	463b      	mov	r3, r7
 80041c2:	f7fc f981 	bl	80004c8 <__aeabi_dmul>
 80041c6:	2200      	movs	r2, #0
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <__ieee754_asin+0x320>)
 80041ca:	f7fb ffc7 	bl	800015c <__adddf3>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4640      	mov	r0, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	f7fc faa1 	bl	800071c <__aeabi_ddiv>
 80041da:	4622      	mov	r2, r4
 80041dc:	462b      	mov	r3, r5
 80041de:	f7fc f973 	bl	80004c8 <__aeabi_dmul>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	e6ce      	b.n	8003f8a <__ieee754_asin+0x4a>
 80041ec:	f3af 8000 	nop.w
 80041f0:	54442d18 	.word	0x54442d18
 80041f4:	3ff921fb 	.word	0x3ff921fb
 80041f8:	33145c07 	.word	0x33145c07
 80041fc:	3c91a626 	.word	0x3c91a626
 8004200:	8800759c 	.word	0x8800759c
 8004204:	7e37e43c 	.word	0x7e37e43c
 8004208:	0dfdf709 	.word	0x0dfdf709
 800420c:	3f023de1 	.word	0x3f023de1
 8004210:	7501b288 	.word	0x7501b288
 8004214:	3f49efe0 	.word	0x3f49efe0
 8004218:	b5688f3b 	.word	0xb5688f3b
 800421c:	3fa48228 	.word	0x3fa48228
 8004220:	0e884455 	.word	0x0e884455
 8004224:	3fc9c155 	.word	0x3fc9c155
 8004228:	03eb6f7d 	.word	0x03eb6f7d
 800422c:	3fd4d612 	.word	0x3fd4d612
 8004230:	55555555 	.word	0x55555555
 8004234:	3fc55555 	.word	0x3fc55555
 8004238:	b12e9282 	.word	0xb12e9282
 800423c:	3fb3b8c5 	.word	0x3fb3b8c5
 8004240:	1b8d0159 	.word	0x1b8d0159
 8004244:	3fe6066c 	.word	0x3fe6066c
 8004248:	9c598ac8 	.word	0x9c598ac8
 800424c:	40002ae5 	.word	0x40002ae5
 8004250:	1c8a2d4b 	.word	0x1c8a2d4b
 8004254:	40033a27 	.word	0x40033a27
 8004258:	3fefffff 	.word	0x3fefffff
 800425c:	3fdfffff 	.word	0x3fdfffff
 8004260:	3ff00000 	.word	0x3ff00000
 8004264:	3fe00000 	.word	0x3fe00000
 8004268:	3fef3332 	.word	0x3fef3332
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	f7fb ff74 	bl	800015c <__adddf3>
 8004274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004278:	4606      	mov	r6, r0
 800427a:	460f      	mov	r7, r1
 800427c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004280:	f7fc fa4c 	bl	800071c <__aeabi_ddiv>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4630      	mov	r0, r6
 800428a:	4639      	mov	r1, r7
 800428c:	f7fc f91c 	bl	80004c8 <__aeabi_dmul>
 8004290:	f04f 0800 	mov.w	r8, #0
 8004294:	4606      	mov	r6, r0
 8004296:	460f      	mov	r7, r1
 8004298:	4642      	mov	r2, r8
 800429a:	465b      	mov	r3, fp
 800429c:	4640      	mov	r0, r8
 800429e:	4659      	mov	r1, fp
 80042a0:	f7fc f912 	bl	80004c8 <__aeabi_dmul>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4620      	mov	r0, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7fb ff54 	bl	8000158 <__aeabi_dsub>
 80042b0:	4642      	mov	r2, r8
 80042b2:	4604      	mov	r4, r0
 80042b4:	460d      	mov	r5, r1
 80042b6:	465b      	mov	r3, fp
 80042b8:	4650      	mov	r0, sl
 80042ba:	4659      	mov	r1, fp
 80042bc:	f7fb ff4e 	bl	800015c <__adddf3>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4620      	mov	r0, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7fc fa28 	bl	800071c <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	f7fb ff44 	bl	800015c <__adddf3>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	a113      	add	r1, pc, #76	; (adr r1, 8004328 <__ieee754_asin+0x3e8>)
 80042da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042de:	f7fb ff3b 	bl	8000158 <__aeabi_dsub>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4630      	mov	r0, r6
 80042e8:	4639      	mov	r1, r7
 80042ea:	f7fb ff35 	bl	8000158 <__aeabi_dsub>
 80042ee:	4642      	mov	r2, r8
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	465b      	mov	r3, fp
 80042f6:	4640      	mov	r0, r8
 80042f8:	4659      	mov	r1, fp
 80042fa:	f7fb ff2f 	bl	800015c <__adddf3>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	a10b      	add	r1, pc, #44	; (adr r1, 8004330 <__ieee754_asin+0x3f0>)
 8004304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004308:	f7fb ff26 	bl	8000158 <__aeabi_dsub>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4620      	mov	r0, r4
 8004312:	4629      	mov	r1, r5
 8004314:	f7fb ff20 	bl	8000158 <__aeabi_dsub>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	a104      	add	r1, pc, #16	; (adr r1, 8004330 <__ieee754_asin+0x3f0>)
 800431e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004322:	e6e7      	b.n	80040f4 <__ieee754_asin+0x1b4>
 8004324:	f3af 8000 	nop.w
 8004328:	33145c07 	.word	0x33145c07
 800432c:	3c91a626 	.word	0x3c91a626
 8004330:	54442d18 	.word	0x54442d18
 8004334:	3fe921fb 	.word	0x3fe921fb

08004338 <__ieee754_rem_pio2>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	4614      	mov	r4, r2
 800433e:	4ac4      	ldr	r2, [pc, #784]	; (8004650 <__ieee754_rem_pio2+0x318>)
 8004340:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004344:	b08d      	sub	sp, #52	; 0x34
 8004346:	4592      	cmp	sl, r2
 8004348:	9104      	str	r1, [sp, #16]
 800434a:	dc07      	bgt.n	800435c <__ieee754_rem_pio2+0x24>
 800434c:	2200      	movs	r2, #0
 800434e:	2300      	movs	r3, #0
 8004350:	e9c4 0100 	strd	r0, r1, [r4]
 8004354:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004358:	2500      	movs	r5, #0
 800435a:	e024      	b.n	80043a6 <__ieee754_rem_pio2+0x6e>
 800435c:	4abd      	ldr	r2, [pc, #756]	; (8004654 <__ieee754_rem_pio2+0x31c>)
 800435e:	4592      	cmp	sl, r2
 8004360:	dc72      	bgt.n	8004448 <__ieee754_rem_pio2+0x110>
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	4dbc      	ldr	r5, [pc, #752]	; (8004658 <__ieee754_rem_pio2+0x320>)
 8004366:	2b00      	cmp	r3, #0
 8004368:	a3ab      	add	r3, pc, #684	; (adr r3, 8004618 <__ieee754_rem_pio2+0x2e0>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	dd36      	ble.n	80043de <__ieee754_rem_pio2+0xa6>
 8004370:	f7fb fef2 	bl	8000158 <__aeabi_dsub>
 8004374:	45aa      	cmp	sl, r5
 8004376:	4606      	mov	r6, r0
 8004378:	460f      	mov	r7, r1
 800437a:	d018      	beq.n	80043ae <__ieee754_rem_pio2+0x76>
 800437c:	a3a8      	add	r3, pc, #672	; (adr r3, 8004620 <__ieee754_rem_pio2+0x2e8>)
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f7fb fee9 	bl	8000158 <__aeabi_dsub>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4630      	mov	r0, r6
 800438c:	e9c4 2300 	strd	r2, r3, [r4]
 8004390:	4639      	mov	r1, r7
 8004392:	f7fb fee1 	bl	8000158 <__aeabi_dsub>
 8004396:	a3a2      	add	r3, pc, #648	; (adr r3, 8004620 <__ieee754_rem_pio2+0x2e8>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb fedc 	bl	8000158 <__aeabi_dsub>
 80043a0:	2501      	movs	r5, #1
 80043a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043a6:	4628      	mov	r0, r5
 80043a8:	b00d      	add	sp, #52	; 0x34
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	a39e      	add	r3, pc, #632	; (adr r3, 8004628 <__ieee754_rem_pio2+0x2f0>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fb fed0 	bl	8000158 <__aeabi_dsub>
 80043b8:	a39d      	add	r3, pc, #628	; (adr r3, 8004630 <__ieee754_rem_pio2+0x2f8>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	4606      	mov	r6, r0
 80043c0:	460f      	mov	r7, r1
 80043c2:	f7fb fec9 	bl	8000158 <__aeabi_dsub>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4630      	mov	r0, r6
 80043cc:	e9c4 2300 	strd	r2, r3, [r4]
 80043d0:	4639      	mov	r1, r7
 80043d2:	f7fb fec1 	bl	8000158 <__aeabi_dsub>
 80043d6:	a396      	add	r3, pc, #600	; (adr r3, 8004630 <__ieee754_rem_pio2+0x2f8>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	e7de      	b.n	800439c <__ieee754_rem_pio2+0x64>
 80043de:	f7fb febd 	bl	800015c <__adddf3>
 80043e2:	45aa      	cmp	sl, r5
 80043e4:	4606      	mov	r6, r0
 80043e6:	460f      	mov	r7, r1
 80043e8:	d016      	beq.n	8004418 <__ieee754_rem_pio2+0xe0>
 80043ea:	a38d      	add	r3, pc, #564	; (adr r3, 8004620 <__ieee754_rem_pio2+0x2e8>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f7fb feb4 	bl	800015c <__adddf3>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4630      	mov	r0, r6
 80043fa:	e9c4 2300 	strd	r2, r3, [r4]
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fb feaa 	bl	8000158 <__aeabi_dsub>
 8004404:	a386      	add	r3, pc, #536	; (adr r3, 8004620 <__ieee754_rem_pio2+0x2e8>)
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f7fb fea7 	bl	800015c <__adddf3>
 800440e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004412:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004416:	e7c6      	b.n	80043a6 <__ieee754_rem_pio2+0x6e>
 8004418:	a383      	add	r3, pc, #524	; (adr r3, 8004628 <__ieee754_rem_pio2+0x2f0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fb fe9d 	bl	800015c <__adddf3>
 8004422:	a383      	add	r3, pc, #524	; (adr r3, 8004630 <__ieee754_rem_pio2+0x2f8>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	4606      	mov	r6, r0
 800442a:	460f      	mov	r7, r1
 800442c:	f7fb fe96 	bl	800015c <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4630      	mov	r0, r6
 8004436:	e9c4 2300 	strd	r2, r3, [r4]
 800443a:	4639      	mov	r1, r7
 800443c:	f7fb fe8c 	bl	8000158 <__aeabi_dsub>
 8004440:	a37b      	add	r3, pc, #492	; (adr r3, 8004630 <__ieee754_rem_pio2+0x2f8>)
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	e7e0      	b.n	800440a <__ieee754_rem_pio2+0xd2>
 8004448:	4a84      	ldr	r2, [pc, #528]	; (800465c <__ieee754_rem_pio2+0x324>)
 800444a:	4592      	cmp	sl, r2
 800444c:	f300 80d5 	bgt.w	80045fa <__ieee754_rem_pio2+0x2c2>
 8004450:	f000 fed0 	bl	80051f4 <fabs>
 8004454:	a378      	add	r3, pc, #480	; (adr r3, 8004638 <__ieee754_rem_pio2+0x300>)
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	4606      	mov	r6, r0
 800445c:	460f      	mov	r7, r1
 800445e:	f7fc f833 	bl	80004c8 <__aeabi_dmul>
 8004462:	2200      	movs	r2, #0
 8004464:	4b7e      	ldr	r3, [pc, #504]	; (8004660 <__ieee754_rem_pio2+0x328>)
 8004466:	f7fb fe79 	bl	800015c <__adddf3>
 800446a:	f7fc fadd 	bl	8000a28 <__aeabi_d2iz>
 800446e:	4605      	mov	r5, r0
 8004470:	f7fb ffc0 	bl	80003f4 <__aeabi_i2d>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800447c:	a366      	add	r3, pc, #408	; (adr r3, 8004618 <__ieee754_rem_pio2+0x2e0>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fc f821 	bl	80004c8 <__aeabi_dmul>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4630      	mov	r0, r6
 800448c:	4639      	mov	r1, r7
 800448e:	f7fb fe63 	bl	8000158 <__aeabi_dsub>
 8004492:	a363      	add	r3, pc, #396	; (adr r3, 8004620 <__ieee754_rem_pio2+0x2e8>)
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	4680      	mov	r8, r0
 800449a:	4689      	mov	r9, r1
 800449c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a0:	f7fc f812 	bl	80004c8 <__aeabi_dmul>
 80044a4:	2d1f      	cmp	r5, #31
 80044a6:	4606      	mov	r6, r0
 80044a8:	460f      	mov	r7, r1
 80044aa:	dc0e      	bgt.n	80044ca <__ieee754_rem_pio2+0x192>
 80044ac:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <__ieee754_rem_pio2+0x32c>)
 80044ae:	1e6a      	subs	r2, r5, #1
 80044b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b4:	4553      	cmp	r3, sl
 80044b6:	d008      	beq.n	80044ca <__ieee754_rem_pio2+0x192>
 80044b8:	4632      	mov	r2, r6
 80044ba:	463b      	mov	r3, r7
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fb fe4a 	bl	8000158 <__aeabi_dsub>
 80044c4:	e9c4 0100 	strd	r0, r1, [r4]
 80044c8:	e013      	b.n	80044f2 <__ieee754_rem_pio2+0x1ba>
 80044ca:	463b      	mov	r3, r7
 80044cc:	4632      	mov	r2, r6
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fb fe41 	bl	8000158 <__aeabi_dsub>
 80044d6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044e0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80044e4:	f1ba 0f10 	cmp.w	sl, #16
 80044e8:	dc1f      	bgt.n	800452a <__ieee754_rem_pio2+0x1f2>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	e9c4 2300 	strd	r2, r3, [r4]
 80044f2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80044f6:	4640      	mov	r0, r8
 80044f8:	4653      	mov	r3, sl
 80044fa:	4649      	mov	r1, r9
 80044fc:	f7fb fe2c 	bl	8000158 <__aeabi_dsub>
 8004500:	4632      	mov	r2, r6
 8004502:	463b      	mov	r3, r7
 8004504:	f7fb fe28 	bl	8000158 <__aeabi_dsub>
 8004508:	460b      	mov	r3, r1
 800450a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800450e:	9904      	ldr	r1, [sp, #16]
 8004510:	4602      	mov	r2, r0
 8004512:	2900      	cmp	r1, #0
 8004514:	f6bf af47 	bge.w	80043a6 <__ieee754_rem_pio2+0x6e>
 8004518:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800451c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004520:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004524:	60e3      	str	r3, [r4, #12]
 8004526:	426d      	negs	r5, r5
 8004528:	e73d      	b.n	80043a6 <__ieee754_rem_pio2+0x6e>
 800452a:	a33f      	add	r3, pc, #252	; (adr r3, 8004628 <__ieee754_rem_pio2+0x2f0>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004534:	f7fb ffc8 	bl	80004c8 <__aeabi_dmul>
 8004538:	4606      	mov	r6, r0
 800453a:	460f      	mov	r7, r1
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fb fe08 	bl	8000158 <__aeabi_dsub>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4682      	mov	sl, r0
 800454e:	468b      	mov	fp, r1
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	f7fb fe00 	bl	8000158 <__aeabi_dsub>
 8004558:	4632      	mov	r2, r6
 800455a:	463b      	mov	r3, r7
 800455c:	f7fb fdfc 	bl	8000158 <__aeabi_dsub>
 8004560:	a333      	add	r3, pc, #204	; (adr r3, 8004630 <__ieee754_rem_pio2+0x2f8>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	4606      	mov	r6, r0
 8004568:	460f      	mov	r7, r1
 800456a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800456e:	f7fb ffab 	bl	80004c8 <__aeabi_dmul>
 8004572:	4632      	mov	r2, r6
 8004574:	463b      	mov	r3, r7
 8004576:	f7fb fdef 	bl	8000158 <__aeabi_dsub>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4606      	mov	r6, r0
 8004580:	460f      	mov	r7, r1
 8004582:	4650      	mov	r0, sl
 8004584:	4659      	mov	r1, fp
 8004586:	f7fb fde7 	bl	8000158 <__aeabi_dsub>
 800458a:	9a05      	ldr	r2, [sp, #20]
 800458c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b31      	cmp	r3, #49	; 0x31
 8004594:	dc06      	bgt.n	80045a4 <__ieee754_rem_pio2+0x26c>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	46d0      	mov	r8, sl
 800459c:	46d9      	mov	r9, fp
 800459e:	e9c4 2300 	strd	r2, r3, [r4]
 80045a2:	e7a6      	b.n	80044f2 <__ieee754_rem_pio2+0x1ba>
 80045a4:	a326      	add	r3, pc, #152	; (adr r3, 8004640 <__ieee754_rem_pio2+0x308>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ae:	f7fb ff8b 	bl	80004c8 <__aeabi_dmul>
 80045b2:	4606      	mov	r6, r0
 80045b4:	460f      	mov	r7, r1
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4650      	mov	r0, sl
 80045bc:	4659      	mov	r1, fp
 80045be:	f7fb fdcb 	bl	8000158 <__aeabi_dsub>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4680      	mov	r8, r0
 80045c8:	4689      	mov	r9, r1
 80045ca:	4650      	mov	r0, sl
 80045cc:	4659      	mov	r1, fp
 80045ce:	f7fb fdc3 	bl	8000158 <__aeabi_dsub>
 80045d2:	4632      	mov	r2, r6
 80045d4:	463b      	mov	r3, r7
 80045d6:	f7fb fdbf 	bl	8000158 <__aeabi_dsub>
 80045da:	a31b      	add	r3, pc, #108	; (adr r3, 8004648 <__ieee754_rem_pio2+0x310>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	4606      	mov	r6, r0
 80045e2:	460f      	mov	r7, r1
 80045e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e8:	f7fb ff6e 	bl	80004c8 <__aeabi_dmul>
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	f7fb fdb2 	bl	8000158 <__aeabi_dsub>
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
 80045f8:	e75e      	b.n	80044b8 <__ieee754_rem_pio2+0x180>
 80045fa:	4a1b      	ldr	r2, [pc, #108]	; (8004668 <__ieee754_rem_pio2+0x330>)
 80045fc:	4592      	cmp	sl, r2
 80045fe:	dd35      	ble.n	800466c <__ieee754_rem_pio2+0x334>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	f7fb fda8 	bl	8000158 <__aeabi_dsub>
 8004608:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800460c:	e9c4 0100 	strd	r0, r1, [r4]
 8004610:	e6a2      	b.n	8004358 <__ieee754_rem_pio2+0x20>
 8004612:	bf00      	nop
 8004614:	f3af 8000 	nop.w
 8004618:	54400000 	.word	0x54400000
 800461c:	3ff921fb 	.word	0x3ff921fb
 8004620:	1a626331 	.word	0x1a626331
 8004624:	3dd0b461 	.word	0x3dd0b461
 8004628:	1a600000 	.word	0x1a600000
 800462c:	3dd0b461 	.word	0x3dd0b461
 8004630:	2e037073 	.word	0x2e037073
 8004634:	3ba3198a 	.word	0x3ba3198a
 8004638:	6dc9c883 	.word	0x6dc9c883
 800463c:	3fe45f30 	.word	0x3fe45f30
 8004640:	2e000000 	.word	0x2e000000
 8004644:	3ba3198a 	.word	0x3ba3198a
 8004648:	252049c1 	.word	0x252049c1
 800464c:	397b839a 	.word	0x397b839a
 8004650:	3fe921fb 	.word	0x3fe921fb
 8004654:	4002d97b 	.word	0x4002d97b
 8004658:	3ff921fb 	.word	0x3ff921fb
 800465c:	413921fb 	.word	0x413921fb
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	08005454 	.word	0x08005454
 8004668:	7fefffff 	.word	0x7fefffff
 800466c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004670:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004674:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004678:	460f      	mov	r7, r1
 800467a:	4606      	mov	r6, r0
 800467c:	f7fc f9d4 	bl	8000a28 <__aeabi_d2iz>
 8004680:	f7fb feb8 	bl	80003f4 <__aeabi_i2d>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4630      	mov	r0, r6
 800468a:	4639      	mov	r1, r7
 800468c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004690:	f7fb fd62 	bl	8000158 <__aeabi_dsub>
 8004694:	2200      	movs	r2, #0
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <__ieee754_rem_pio2+0x3e8>)
 8004698:	f7fb ff16 	bl	80004c8 <__aeabi_dmul>
 800469c:	460f      	mov	r7, r1
 800469e:	4606      	mov	r6, r0
 80046a0:	f7fc f9c2 	bl	8000a28 <__aeabi_d2iz>
 80046a4:	f7fb fea6 	bl	80003f4 <__aeabi_i2d>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046b4:	f7fb fd50 	bl	8000158 <__aeabi_dsub>
 80046b8:	2200      	movs	r2, #0
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <__ieee754_rem_pio2+0x3e8>)
 80046bc:	f7fb ff04 	bl	80004c8 <__aeabi_dmul>
 80046c0:	f04f 0803 	mov.w	r8, #3
 80046c4:	2600      	movs	r6, #0
 80046c6:	2700      	movs	r7, #0
 80046c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80046cc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80046d0:	4632      	mov	r2, r6
 80046d2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80046d6:	463b      	mov	r3, r7
 80046d8:	46c2      	mov	sl, r8
 80046da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80046de:	f7fc f95b 	bl	8000998 <__aeabi_dcmpeq>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d1f4      	bne.n	80046d0 <__ieee754_rem_pio2+0x398>
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <__ieee754_rem_pio2+0x3ec>)
 80046e8:	462a      	mov	r2, r5
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2302      	movs	r3, #2
 80046ee:	4621      	mov	r1, r4
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	a806      	add	r0, sp, #24
 80046f4:	4653      	mov	r3, sl
 80046f6:	f000 f985 	bl	8004a04 <__kernel_rem_pio2>
 80046fa:	9b04      	ldr	r3, [sp, #16]
 80046fc:	4605      	mov	r5, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f6bf ae51 	bge.w	80043a6 <__ieee754_rem_pio2+0x6e>
 8004704:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800470c:	e9c4 2300 	strd	r2, r3, [r4]
 8004710:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004718:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800471c:	e703      	b.n	8004526 <__ieee754_rem_pio2+0x1ee>
 800471e:	bf00      	nop
 8004720:	41700000 	.word	0x41700000
 8004724:	080054d4 	.word	0x080054d4

08004728 <__ieee754_sqrt>:
 8004728:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004884 <__ieee754_sqrt+0x15c>
 800472c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004730:	ea3c 0c01 	bics.w	ip, ip, r1
 8004734:	4606      	mov	r6, r0
 8004736:	460d      	mov	r5, r1
 8004738:	460c      	mov	r4, r1
 800473a:	460a      	mov	r2, r1
 800473c:	4607      	mov	r7, r0
 800473e:	4603      	mov	r3, r0
 8004740:	d10f      	bne.n	8004762 <__ieee754_sqrt+0x3a>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	f7fb febf 	bl	80004c8 <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4630      	mov	r0, r6
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd03 	bl	800015c <__adddf3>
 8004756:	4606      	mov	r6, r0
 8004758:	460d      	mov	r5, r1
 800475a:	4630      	mov	r0, r6
 800475c:	4629      	mov	r1, r5
 800475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004762:	2900      	cmp	r1, #0
 8004764:	dc0e      	bgt.n	8004784 <__ieee754_sqrt+0x5c>
 8004766:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800476a:	ea5c 0707 	orrs.w	r7, ip, r7
 800476e:	d0f4      	beq.n	800475a <__ieee754_sqrt+0x32>
 8004770:	b141      	cbz	r1, 8004784 <__ieee754_sqrt+0x5c>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	f7fb fcef 	bl	8000158 <__aeabi_dsub>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	f7fb ffcd 	bl	800071c <__aeabi_ddiv>
 8004782:	e7e8      	b.n	8004756 <__ieee754_sqrt+0x2e>
 8004784:	1521      	asrs	r1, r4, #20
 8004786:	d075      	beq.n	8004874 <__ieee754_sqrt+0x14c>
 8004788:	07cc      	lsls	r4, r1, #31
 800478a:	f04f 0400 	mov.w	r4, #0
 800478e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004792:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004796:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800479a:	bf5e      	ittt	pl
 800479c:	0fd9      	lsrpl	r1, r3, #31
 800479e:	005b      	lslpl	r3, r3, #1
 80047a0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80047a4:	0fd9      	lsrs	r1, r3, #31
 80047a6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80047aa:	2516      	movs	r5, #22
 80047ac:	4620      	mov	r0, r4
 80047ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b2:	107f      	asrs	r7, r7, #1
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	1846      	adds	r6, r0, r1
 80047b8:	4296      	cmp	r6, r2
 80047ba:	bfde      	ittt	le
 80047bc:	1b92      	suble	r2, r2, r6
 80047be:	1870      	addle	r0, r6, r1
 80047c0:	1864      	addle	r4, r4, r1
 80047c2:	0052      	lsls	r2, r2, #1
 80047c4:	3d01      	subs	r5, #1
 80047c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80047ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80047ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047d2:	d1f0      	bne.n	80047b6 <__ieee754_sqrt+0x8e>
 80047d4:	4629      	mov	r1, r5
 80047d6:	f04f 0e20 	mov.w	lr, #32
 80047da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80047de:	4282      	cmp	r2, r0
 80047e0:	eb06 0c05 	add.w	ip, r6, r5
 80047e4:	dc02      	bgt.n	80047ec <__ieee754_sqrt+0xc4>
 80047e6:	d113      	bne.n	8004810 <__ieee754_sqrt+0xe8>
 80047e8:	459c      	cmp	ip, r3
 80047ea:	d811      	bhi.n	8004810 <__ieee754_sqrt+0xe8>
 80047ec:	f1bc 0f00 	cmp.w	ip, #0
 80047f0:	eb0c 0506 	add.w	r5, ip, r6
 80047f4:	da43      	bge.n	800487e <__ieee754_sqrt+0x156>
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	db41      	blt.n	800487e <__ieee754_sqrt+0x156>
 80047fa:	f100 0801 	add.w	r8, r0, #1
 80047fe:	1a12      	subs	r2, r2, r0
 8004800:	4640      	mov	r0, r8
 8004802:	459c      	cmp	ip, r3
 8004804:	bf88      	it	hi
 8004806:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800480a:	eba3 030c 	sub.w	r3, r3, ip
 800480e:	4431      	add	r1, r6
 8004810:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004814:	f1be 0e01 	subs.w	lr, lr, #1
 8004818:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800481c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004820:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004824:	d1db      	bne.n	80047de <__ieee754_sqrt+0xb6>
 8004826:	4313      	orrs	r3, r2
 8004828:	d006      	beq.n	8004838 <__ieee754_sqrt+0x110>
 800482a:	1c48      	adds	r0, r1, #1
 800482c:	bf0b      	itete	eq
 800482e:	4671      	moveq	r1, lr
 8004830:	3101      	addne	r1, #1
 8004832:	3401      	addeq	r4, #1
 8004834:	f021 0101 	bicne.w	r1, r1, #1
 8004838:	1063      	asrs	r3, r4, #1
 800483a:	0849      	lsrs	r1, r1, #1
 800483c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004840:	07e2      	lsls	r2, r4, #31
 8004842:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004846:	bf48      	it	mi
 8004848:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800484c:	460e      	mov	r6, r1
 800484e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004852:	e782      	b.n	800475a <__ieee754_sqrt+0x32>
 8004854:	0ada      	lsrs	r2, r3, #11
 8004856:	3815      	subs	r0, #21
 8004858:	055b      	lsls	r3, r3, #21
 800485a:	2a00      	cmp	r2, #0
 800485c:	d0fa      	beq.n	8004854 <__ieee754_sqrt+0x12c>
 800485e:	02d5      	lsls	r5, r2, #11
 8004860:	d50a      	bpl.n	8004878 <__ieee754_sqrt+0x150>
 8004862:	f1c1 0420 	rsb	r4, r1, #32
 8004866:	fa23 f404 	lsr.w	r4, r3, r4
 800486a:	1e4d      	subs	r5, r1, #1
 800486c:	408b      	lsls	r3, r1
 800486e:	4322      	orrs	r2, r4
 8004870:	1b41      	subs	r1, r0, r5
 8004872:	e789      	b.n	8004788 <__ieee754_sqrt+0x60>
 8004874:	4608      	mov	r0, r1
 8004876:	e7f0      	b.n	800485a <__ieee754_sqrt+0x132>
 8004878:	0052      	lsls	r2, r2, #1
 800487a:	3101      	adds	r1, #1
 800487c:	e7ef      	b.n	800485e <__ieee754_sqrt+0x136>
 800487e:	4680      	mov	r8, r0
 8004880:	e7bd      	b.n	80047fe <__ieee754_sqrt+0xd6>
 8004882:	bf00      	nop
 8004884:	7ff00000 	.word	0x7ff00000

08004888 <__kernel_cos>:
 8004888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004890:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004894:	4680      	mov	r8, r0
 8004896:	460f      	mov	r7, r1
 8004898:	e9cd 2300 	strd	r2, r3, [sp]
 800489c:	da04      	bge.n	80048a8 <__kernel_cos+0x20>
 800489e:	f7fc f8c3 	bl	8000a28 <__aeabi_d2iz>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f000 8086 	beq.w	80049b4 <__kernel_cos+0x12c>
 80048a8:	4642      	mov	r2, r8
 80048aa:	463b      	mov	r3, r7
 80048ac:	4640      	mov	r0, r8
 80048ae:	4639      	mov	r1, r7
 80048b0:	f7fb fe0a 	bl	80004c8 <__aeabi_dmul>
 80048b4:	2200      	movs	r2, #0
 80048b6:	4b4e      	ldr	r3, [pc, #312]	; (80049f0 <__kernel_cos+0x168>)
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	f7fb fe04 	bl	80004c8 <__aeabi_dmul>
 80048c0:	a33f      	add	r3, pc, #252	; (adr r3, 80049c0 <__kernel_cos+0x138>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	4682      	mov	sl, r0
 80048c8:	468b      	mov	fp, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fdfb 	bl	80004c8 <__aeabi_dmul>
 80048d2:	a33d      	add	r3, pc, #244	; (adr r3, 80049c8 <__kernel_cos+0x140>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fb fc40 	bl	800015c <__adddf3>
 80048dc:	4622      	mov	r2, r4
 80048de:	462b      	mov	r3, r5
 80048e0:	f7fb fdf2 	bl	80004c8 <__aeabi_dmul>
 80048e4:	a33a      	add	r3, pc, #232	; (adr r3, 80049d0 <__kernel_cos+0x148>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fc35 	bl	8000158 <__aeabi_dsub>
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f7fb fde9 	bl	80004c8 <__aeabi_dmul>
 80048f6:	a338      	add	r3, pc, #224	; (adr r3, 80049d8 <__kernel_cos+0x150>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fc2e 	bl	800015c <__adddf3>
 8004900:	4622      	mov	r2, r4
 8004902:	462b      	mov	r3, r5
 8004904:	f7fb fde0 	bl	80004c8 <__aeabi_dmul>
 8004908:	a335      	add	r3, pc, #212	; (adr r3, 80049e0 <__kernel_cos+0x158>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fc23 	bl	8000158 <__aeabi_dsub>
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	f7fb fdd7 	bl	80004c8 <__aeabi_dmul>
 800491a:	a333      	add	r3, pc, #204	; (adr r3, 80049e8 <__kernel_cos+0x160>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fc1c 	bl	800015c <__adddf3>
 8004924:	4622      	mov	r2, r4
 8004926:	462b      	mov	r3, r5
 8004928:	f7fb fdce 	bl	80004c8 <__aeabi_dmul>
 800492c:	4622      	mov	r2, r4
 800492e:	462b      	mov	r3, r5
 8004930:	f7fb fdca 	bl	80004c8 <__aeabi_dmul>
 8004934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	4640      	mov	r0, r8
 800493e:	4639      	mov	r1, r7
 8004940:	f7fb fdc2 	bl	80004c8 <__aeabi_dmul>
 8004944:	460b      	mov	r3, r1
 8004946:	4602      	mov	r2, r0
 8004948:	4629      	mov	r1, r5
 800494a:	4620      	mov	r0, r4
 800494c:	f7fb fc04 	bl	8000158 <__aeabi_dsub>
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <__kernel_cos+0x16c>)
 8004952:	4680      	mov	r8, r0
 8004954:	429e      	cmp	r6, r3
 8004956:	4689      	mov	r9, r1
 8004958:	dc0e      	bgt.n	8004978 <__kernel_cos+0xf0>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4650      	mov	r0, sl
 8004960:	4659      	mov	r1, fp
 8004962:	f7fb fbf9 	bl	8000158 <__aeabi_dsub>
 8004966:	4602      	mov	r2, r0
 8004968:	2000      	movs	r0, #0
 800496a:	460b      	mov	r3, r1
 800496c:	4922      	ldr	r1, [pc, #136]	; (80049f8 <__kernel_cos+0x170>)
 800496e:	f7fb fbf3 	bl	8000158 <__aeabi_dsub>
 8004972:	b003      	add	sp, #12
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	2400      	movs	r4, #0
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <__kernel_cos+0x174>)
 800497c:	4622      	mov	r2, r4
 800497e:	429e      	cmp	r6, r3
 8004980:	bfcc      	ite	gt
 8004982:	4d1f      	ldrgt	r5, [pc, #124]	; (8004a00 <__kernel_cos+0x178>)
 8004984:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004988:	462b      	mov	r3, r5
 800498a:	2000      	movs	r0, #0
 800498c:	491a      	ldr	r1, [pc, #104]	; (80049f8 <__kernel_cos+0x170>)
 800498e:	f7fb fbe3 	bl	8000158 <__aeabi_dsub>
 8004992:	4622      	mov	r2, r4
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	462b      	mov	r3, r5
 800499a:	4650      	mov	r0, sl
 800499c:	4659      	mov	r1, fp
 800499e:	f7fb fbdb 	bl	8000158 <__aeabi_dsub>
 80049a2:	4642      	mov	r2, r8
 80049a4:	464b      	mov	r3, r9
 80049a6:	f7fb fbd7 	bl	8000158 <__aeabi_dsub>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4630      	mov	r0, r6
 80049b0:	4639      	mov	r1, r7
 80049b2:	e7dc      	b.n	800496e <__kernel_cos+0xe6>
 80049b4:	2000      	movs	r0, #0
 80049b6:	4910      	ldr	r1, [pc, #64]	; (80049f8 <__kernel_cos+0x170>)
 80049b8:	e7db      	b.n	8004972 <__kernel_cos+0xea>
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	be8838d4 	.word	0xbe8838d4
 80049c4:	bda8fae9 	.word	0xbda8fae9
 80049c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80049cc:	3e21ee9e 	.word	0x3e21ee9e
 80049d0:	809c52ad 	.word	0x809c52ad
 80049d4:	3e927e4f 	.word	0x3e927e4f
 80049d8:	19cb1590 	.word	0x19cb1590
 80049dc:	3efa01a0 	.word	0x3efa01a0
 80049e0:	16c15177 	.word	0x16c15177
 80049e4:	3f56c16c 	.word	0x3f56c16c
 80049e8:	5555554c 	.word	0x5555554c
 80049ec:	3fa55555 	.word	0x3fa55555
 80049f0:	3fe00000 	.word	0x3fe00000
 80049f4:	3fd33332 	.word	0x3fd33332
 80049f8:	3ff00000 	.word	0x3ff00000
 80049fc:	3fe90000 	.word	0x3fe90000
 8004a00:	3fd20000 	.word	0x3fd20000

08004a04 <__kernel_rem_pio2>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004a0c:	9308      	str	r3, [sp, #32]
 8004a0e:	9106      	str	r1, [sp, #24]
 8004a10:	4bb6      	ldr	r3, [pc, #728]	; (8004cec <__kernel_rem_pio2+0x2e8>)
 8004a12:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004a14:	f112 0f14 	cmn.w	r2, #20
 8004a18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a1c:	bfa8      	it	ge
 8004a1e:	1ed4      	subge	r4, r2, #3
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	9b08      	ldr	r3, [sp, #32]
 8004a24:	bfb8      	it	lt
 8004a26:	2400      	movlt	r4, #0
 8004a28:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004a2c:	9307      	str	r3, [sp, #28]
 8004a2e:	bfa4      	itt	ge
 8004a30:	2318      	movge	r3, #24
 8004a32:	fb94 f4f3 	sdivge	r4, r4, r3
 8004a36:	f06f 0317 	mvn.w	r3, #23
 8004a3a:	fb04 3303 	mla	r3, r4, r3, r3
 8004a3e:	eb03 0b02 	add.w	fp, r3, r2
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	9b02      	ldr	r3, [sp, #8]
 8004a46:	1aa7      	subs	r7, r4, r2
 8004a48:	eb03 0802 	add.w	r8, r3, r2
 8004a4c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004a4e:	2500      	movs	r5, #0
 8004a50:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004a54:	2200      	movs	r2, #0
 8004a56:	2300      	movs	r3, #0
 8004a58:	9009      	str	r0, [sp, #36]	; 0x24
 8004a5a:	ae20      	add	r6, sp, #128	; 0x80
 8004a5c:	4545      	cmp	r5, r8
 8004a5e:	dd14      	ble.n	8004a8a <__kernel_rem_pio2+0x86>
 8004a60:	f04f 0800 	mov.w	r8, #0
 8004a64:	9a08      	ldr	r2, [sp, #32]
 8004a66:	ab20      	add	r3, sp, #128	; 0x80
 8004a68:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004a6c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004a70:	9b02      	ldr	r3, [sp, #8]
 8004a72:	4598      	cmp	r8, r3
 8004a74:	dc35      	bgt.n	8004ae2 <__kernel_rem_pio2+0xde>
 8004a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f1a3 0908 	sub.w	r9, r3, #8
 8004a7e:	2300      	movs	r3, #0
 8004a80:	462f      	mov	r7, r5
 8004a82:	2600      	movs	r6, #0
 8004a84:	e9cd 2300 	strd	r2, r3, [sp]
 8004a88:	e01f      	b.n	8004aca <__kernel_rem_pio2+0xc6>
 8004a8a:	42ef      	cmn	r7, r5
 8004a8c:	d40b      	bmi.n	8004aa6 <__kernel_rem_pio2+0xa2>
 8004a8e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a92:	e9cd 2300 	strd	r2, r3, [sp]
 8004a96:	f7fb fcad 	bl	80003f4 <__aeabi_i2d>
 8004a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a9e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	e7da      	b.n	8004a5c <__kernel_rem_pio2+0x58>
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	e7f8      	b.n	8004a9e <__kernel_rem_pio2+0x9a>
 8004aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004ab4:	f7fb fd08 	bl	80004c8 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ac0:	f7fb fb4c 	bl	800015c <__adddf3>
 8004ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ac8:	3601      	adds	r6, #1
 8004aca:	9b07      	ldr	r3, [sp, #28]
 8004acc:	3f08      	subs	r7, #8
 8004ace:	429e      	cmp	r6, r3
 8004ad0:	ddec      	ble.n	8004aac <__kernel_rem_pio2+0xa8>
 8004ad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad6:	f108 0801 	add.w	r8, r8, #1
 8004ada:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004ade:	3508      	adds	r5, #8
 8004ae0:	e7c6      	b.n	8004a70 <__kernel_rem_pio2+0x6c>
 8004ae2:	9b02      	ldr	r3, [sp, #8]
 8004ae4:	aa0c      	add	r2, sp, #48	; 0x30
 8004ae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004aee:	9e02      	ldr	r6, [sp, #8]
 8004af0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004af4:	930a      	str	r3, [sp, #40]	; 0x28
 8004af6:	ab98      	add	r3, sp, #608	; 0x260
 8004af8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004afc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004b00:	ab70      	add	r3, sp, #448	; 0x1c0
 8004b02:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004b06:	46d0      	mov	r8, sl
 8004b08:	46b1      	mov	r9, r6
 8004b0a:	af0c      	add	r7, sp, #48	; 0x30
 8004b0c:	9700      	str	r7, [sp, #0]
 8004b0e:	f1b9 0f00 	cmp.w	r9, #0
 8004b12:	f1a8 0808 	sub.w	r8, r8, #8
 8004b16:	dc71      	bgt.n	8004bfc <__kernel_rem_pio2+0x1f8>
 8004b18:	465a      	mov	r2, fp
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f000 fbf7 	bl	8005310 <scalbn>
 8004b22:	2200      	movs	r2, #0
 8004b24:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004b28:	4604      	mov	r4, r0
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	f7fb fccc 	bl	80004c8 <__aeabi_dmul>
 8004b30:	f000 fb66 	bl	8005200 <floor>
 8004b34:	2200      	movs	r2, #0
 8004b36:	4b6e      	ldr	r3, [pc, #440]	; (8004cf0 <__kernel_rem_pio2+0x2ec>)
 8004b38:	f7fb fcc6 	bl	80004c8 <__aeabi_dmul>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4620      	mov	r0, r4
 8004b42:	4629      	mov	r1, r5
 8004b44:	f7fb fb08 	bl	8000158 <__aeabi_dsub>
 8004b48:	460d      	mov	r5, r1
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	f7fb ff6c 	bl	8000a28 <__aeabi_d2iz>
 8004b50:	9004      	str	r0, [sp, #16]
 8004b52:	f7fb fc4f 	bl	80003f4 <__aeabi_i2d>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fafb 	bl	8000158 <__aeabi_dsub>
 8004b62:	f1bb 0f00 	cmp.w	fp, #0
 8004b66:	4680      	mov	r8, r0
 8004b68:	4689      	mov	r9, r1
 8004b6a:	dd70      	ble.n	8004c4e <__kernel_rem_pio2+0x24a>
 8004b6c:	1e72      	subs	r2, r6, #1
 8004b6e:	ab0c      	add	r3, sp, #48	; 0x30
 8004b70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b74:	9c04      	ldr	r4, [sp, #16]
 8004b76:	f1cb 0118 	rsb	r1, fp, #24
 8004b7a:	fa40 f301 	asr.w	r3, r0, r1
 8004b7e:	441c      	add	r4, r3
 8004b80:	408b      	lsls	r3, r1
 8004b82:	1ac0      	subs	r0, r0, r3
 8004b84:	ab0c      	add	r3, sp, #48	; 0x30
 8004b86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b8a:	f1cb 0317 	rsb	r3, fp, #23
 8004b8e:	9404      	str	r4, [sp, #16]
 8004b90:	fa40 f303 	asr.w	r3, r0, r3
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	9b00      	ldr	r3, [sp, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dd66      	ble.n	8004c6a <__kernel_rem_pio2+0x266>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	9304      	str	r3, [sp, #16]
 8004baa:	4296      	cmp	r6, r2
 8004bac:	f300 80ac 	bgt.w	8004d08 <__kernel_rem_pio2+0x304>
 8004bb0:	f1bb 0f00 	cmp.w	fp, #0
 8004bb4:	dd07      	ble.n	8004bc6 <__kernel_rem_pio2+0x1c2>
 8004bb6:	f1bb 0f01 	cmp.w	fp, #1
 8004bba:	f000 80b4 	beq.w	8004d26 <__kernel_rem_pio2+0x322>
 8004bbe:	f1bb 0f02 	cmp.w	fp, #2
 8004bc2:	f000 80ba 	beq.w	8004d3a <__kernel_rem_pio2+0x336>
 8004bc6:	9b00      	ldr	r3, [sp, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d14e      	bne.n	8004c6a <__kernel_rem_pio2+0x266>
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	4948      	ldr	r1, [pc, #288]	; (8004cf4 <__kernel_rem_pio2+0x2f0>)
 8004bd4:	f7fb fac0 	bl	8000158 <__aeabi_dsub>
 8004bd8:	4680      	mov	r8, r0
 8004bda:	4689      	mov	r9, r1
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d044      	beq.n	8004c6a <__kernel_rem_pio2+0x266>
 8004be0:	465a      	mov	r2, fp
 8004be2:	2000      	movs	r0, #0
 8004be4:	4943      	ldr	r1, [pc, #268]	; (8004cf4 <__kernel_rem_pio2+0x2f0>)
 8004be6:	f000 fb93 	bl	8005310 <scalbn>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4640      	mov	r0, r8
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	f7fb fab1 	bl	8000158 <__aeabi_dsub>
 8004bf6:	4680      	mov	r8, r0
 8004bf8:	4689      	mov	r9, r1
 8004bfa:	e036      	b.n	8004c6a <__kernel_rem_pio2+0x266>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <__kernel_rem_pio2+0x2f4>)
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb fc60 	bl	80004c8 <__aeabi_dmul>
 8004c08:	f7fb ff0e 	bl	8000a28 <__aeabi_d2iz>
 8004c0c:	f7fb fbf2 	bl	80003f4 <__aeabi_i2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <__kernel_rem_pio2+0x2f8>)
 8004c1c:	f7fb fc54 	bl	80004c8 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fa96 	bl	8000158 <__aeabi_dsub>
 8004c2c:	f7fb fefc 	bl	8000a28 <__aeabi_d2iz>
 8004c30:	9b00      	ldr	r3, [sp, #0]
 8004c32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004c36:	f843 0b04 	str.w	r0, [r3], #4
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c40:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004c44:	f7fb fa8a 	bl	800015c <__adddf3>
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	e75f      	b.n	8004b0e <__kernel_rem_pio2+0x10a>
 8004c4e:	d105      	bne.n	8004c5c <__kernel_rem_pio2+0x258>
 8004c50:	1e73      	subs	r3, r6, #1
 8004c52:	aa0c      	add	r2, sp, #48	; 0x30
 8004c54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c58:	15c3      	asrs	r3, r0, #23
 8004c5a:	e79b      	b.n	8004b94 <__kernel_rem_pio2+0x190>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <__kernel_rem_pio2+0x2fc>)
 8004c60:	f7fb feb8 	bl	80009d4 <__aeabi_dcmpge>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d13e      	bne.n	8004ce6 <__kernel_rem_pio2+0x2e2>
 8004c68:	9000      	str	r0, [sp, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fe91 	bl	8000998 <__aeabi_dcmpeq>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f000 80b1 	beq.w	8004dde <__kernel_rem_pio2+0x3da>
 8004c7c:	1e74      	subs	r4, r6, #1
 8004c7e:	4623      	mov	r3, r4
 8004c80:	2200      	movs	r2, #0
 8004c82:	9902      	ldr	r1, [sp, #8]
 8004c84:	428b      	cmp	r3, r1
 8004c86:	da5f      	bge.n	8004d48 <__kernel_rem_pio2+0x344>
 8004c88:	2a00      	cmp	r2, #0
 8004c8a:	d074      	beq.n	8004d76 <__kernel_rem_pio2+0x372>
 8004c8c:	ab0c      	add	r3, sp, #48	; 0x30
 8004c8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c92:	f1ab 0b18 	sub.w	fp, fp, #24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 809f 	beq.w	8004dda <__kernel_rem_pio2+0x3d6>
 8004c9c:	465a      	mov	r2, fp
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	4914      	ldr	r1, [pc, #80]	; (8004cf4 <__kernel_rem_pio2+0x2f0>)
 8004ca2:	f000 fb35 	bl	8005310 <scalbn>
 8004ca6:	46a2      	mov	sl, r4
 8004ca8:	4606      	mov	r6, r0
 8004caa:	460f      	mov	r7, r1
 8004cac:	f04f 0800 	mov.w	r8, #0
 8004cb0:	ab70      	add	r3, sp, #448	; 0x1c0
 8004cb2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004cf8 <__kernel_rem_pio2+0x2f4>
 8004cb6:	00e5      	lsls	r5, r4, #3
 8004cb8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004cbc:	f1ba 0f00 	cmp.w	sl, #0
 8004cc0:	f280 80c3 	bge.w	8004e4a <__kernel_rem_pio2+0x446>
 8004cc4:	4626      	mov	r6, r4
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	f2c0 80f5 	blt.w	8004eb6 <__kernel_rem_pio2+0x4b2>
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <__kernel_rem_pio2+0x300>)
 8004cce:	f04f 0a00 	mov.w	sl, #0
 8004cd2:	9307      	str	r3, [sp, #28]
 8004cd4:	ab70      	add	r3, sp, #448	; 0x1c0
 8004cd6:	f04f 0b00 	mov.w	fp, #0
 8004cda:	f04f 0800 	mov.w	r8, #0
 8004cde:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004ce2:	1ba7      	subs	r7, r4, r6
 8004ce4:	e0db      	b.n	8004e9e <__kernel_rem_pio2+0x49a>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	e757      	b.n	8004b9c <__kernel_rem_pio2+0x198>
 8004cec:	08005620 	.word	0x08005620
 8004cf0:	40200000 	.word	0x40200000
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	3e700000 	.word	0x3e700000
 8004cfc:	41700000 	.word	0x41700000
 8004d00:	3fe00000 	.word	0x3fe00000
 8004d04:	080055e0 	.word	0x080055e0
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	b944      	cbnz	r4, 8004d1e <__kernel_rem_pio2+0x31a>
 8004d0c:	b11b      	cbz	r3, 8004d16 <__kernel_rem_pio2+0x312>
 8004d0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	461c      	mov	r4, r3
 8004d18:	3201      	adds	r2, #1
 8004d1a:	3704      	adds	r7, #4
 8004d1c:	e745      	b.n	8004baa <__kernel_rem_pio2+0x1a6>
 8004d1e:	1acb      	subs	r3, r1, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4623      	mov	r3, r4
 8004d24:	e7f7      	b.n	8004d16 <__kernel_rem_pio2+0x312>
 8004d26:	1e72      	subs	r2, r6, #1
 8004d28:	ab0c      	add	r3, sp, #48	; 0x30
 8004d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004d32:	a90c      	add	r1, sp, #48	; 0x30
 8004d34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004d38:	e745      	b.n	8004bc6 <__kernel_rem_pio2+0x1c2>
 8004d3a:	1e72      	subs	r2, r6, #1
 8004d3c:	ab0c      	add	r3, sp, #48	; 0x30
 8004d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004d46:	e7f4      	b.n	8004d32 <__kernel_rem_pio2+0x32e>
 8004d48:	a90c      	add	r1, sp, #48	; 0x30
 8004d4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	e796      	b.n	8004c82 <__kernel_rem_pio2+0x27e>
 8004d54:	3401      	adds	r4, #1
 8004d56:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004d5a:	2a00      	cmp	r2, #0
 8004d5c:	d0fa      	beq.n	8004d54 <__kernel_rem_pio2+0x350>
 8004d5e:	9b08      	ldr	r3, [sp, #32]
 8004d60:	f106 0801 	add.w	r8, r6, #1
 8004d64:	18f5      	adds	r5, r6, r3
 8004d66:	ab20      	add	r3, sp, #128	; 0x80
 8004d68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004d6c:	4434      	add	r4, r6
 8004d6e:	4544      	cmp	r4, r8
 8004d70:	da04      	bge.n	8004d7c <__kernel_rem_pio2+0x378>
 8004d72:	4626      	mov	r6, r4
 8004d74:	e6bf      	b.n	8004af6 <__kernel_rem_pio2+0xf2>
 8004d76:	2401      	movs	r4, #1
 8004d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d7a:	e7ec      	b.n	8004d56 <__kernel_rem_pio2+0x352>
 8004d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7e:	f04f 0900 	mov.w	r9, #0
 8004d82:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d86:	f7fb fb35 	bl	80003f4 <__aeabi_i2d>
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	2700      	movs	r7, #0
 8004d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d90:	e9c5 0100 	strd	r0, r1, [r5]
 8004d94:	3b08      	subs	r3, #8
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	9504      	str	r5, [sp, #16]
 8004d9a:	9b07      	ldr	r3, [sp, #28]
 8004d9c:	4599      	cmp	r9, r3
 8004d9e:	dd05      	ble.n	8004dac <__kernel_rem_pio2+0x3a8>
 8004da0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004da4:	f108 0801 	add.w	r8, r8, #1
 8004da8:	3508      	adds	r5, #8
 8004daa:	e7e0      	b.n	8004d6e <__kernel_rem_pio2+0x36a>
 8004dac:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004db0:	9900      	ldr	r1, [sp, #0]
 8004db2:	f109 0901 	add.w	r9, r9, #1
 8004db6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004dba:	9100      	str	r1, [sp, #0]
 8004dbc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004dc0:	f8cd c010 	str.w	ip, [sp, #16]
 8004dc4:	f7fb fb80 	bl	80004c8 <__aeabi_dmul>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	f7fb f9c4 	bl	800015c <__adddf3>
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	e7df      	b.n	8004d9a <__kernel_rem_pio2+0x396>
 8004dda:	3c01      	subs	r4, #1
 8004ddc:	e756      	b.n	8004c8c <__kernel_rem_pio2+0x288>
 8004dde:	f1cb 0200 	rsb	r2, fp, #0
 8004de2:	4640      	mov	r0, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	f000 fa93 	bl	8005310 <scalbn>
 8004dea:	2200      	movs	r2, #0
 8004dec:	4ba4      	ldr	r3, [pc, #656]	; (8005080 <__kernel_rem_pio2+0x67c>)
 8004dee:	4604      	mov	r4, r0
 8004df0:	460d      	mov	r5, r1
 8004df2:	f7fb fdef 	bl	80009d4 <__aeabi_dcmpge>
 8004df6:	b1f8      	cbz	r0, 8004e38 <__kernel_rem_pio2+0x434>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4ba2      	ldr	r3, [pc, #648]	; (8005084 <__kernel_rem_pio2+0x680>)
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fb62 	bl	80004c8 <__aeabi_dmul>
 8004e04:	f7fb fe10 	bl	8000a28 <__aeabi_d2iz>
 8004e08:	4607      	mov	r7, r0
 8004e0a:	f7fb faf3 	bl	80003f4 <__aeabi_i2d>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <__kernel_rem_pio2+0x67c>)
 8004e12:	f7fb fb59 	bl	80004c8 <__aeabi_dmul>
 8004e16:	460b      	mov	r3, r1
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7fb f99b 	bl	8000158 <__aeabi_dsub>
 8004e22:	f7fb fe01 	bl	8000a28 <__aeabi_d2iz>
 8004e26:	1c74      	adds	r4, r6, #1
 8004e28:	ab0c      	add	r3, sp, #48	; 0x30
 8004e2a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004e2e:	f10b 0b18 	add.w	fp, fp, #24
 8004e32:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004e36:	e731      	b.n	8004c9c <__kernel_rem_pio2+0x298>
 8004e38:	4620      	mov	r0, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	f7fb fdf4 	bl	8000a28 <__aeabi_d2iz>
 8004e40:	ab0c      	add	r3, sp, #48	; 0x30
 8004e42:	4634      	mov	r4, r6
 8004e44:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004e48:	e728      	b.n	8004c9c <__kernel_rem_pio2+0x298>
 8004e4a:	ab0c      	add	r3, sp, #48	; 0x30
 8004e4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004e50:	f7fb fad0 	bl	80003f4 <__aeabi_i2d>
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	f7fb fb36 	bl	80004c8 <__aeabi_dmul>
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004e62:	464b      	mov	r3, r9
 8004e64:	4630      	mov	r0, r6
 8004e66:	4639      	mov	r1, r7
 8004e68:	f7fb fb2e 	bl	80004c8 <__aeabi_dmul>
 8004e6c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e70:	4606      	mov	r6, r0
 8004e72:	460f      	mov	r7, r1
 8004e74:	e722      	b.n	8004cbc <__kernel_rem_pio2+0x2b8>
 8004e76:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004e7a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e7e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004e82:	f8cd c01c 	str.w	ip, [sp, #28]
 8004e86:	f7fb fb1f 	bl	80004c8 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4650      	mov	r0, sl
 8004e90:	4659      	mov	r1, fp
 8004e92:	f7fb f963 	bl	800015c <__adddf3>
 8004e96:	4682      	mov	sl, r0
 8004e98:	468b      	mov	fp, r1
 8004e9a:	f108 0801 	add.w	r8, r8, #1
 8004e9e:	9b02      	ldr	r3, [sp, #8]
 8004ea0:	4598      	cmp	r8, r3
 8004ea2:	dc01      	bgt.n	8004ea8 <__kernel_rem_pio2+0x4a4>
 8004ea4:	45b8      	cmp	r8, r7
 8004ea6:	dde6      	ble.n	8004e76 <__kernel_rem_pio2+0x472>
 8004ea8:	ab48      	add	r3, sp, #288	; 0x120
 8004eaa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004eae:	e9c7 ab00 	strd	sl, fp, [r7]
 8004eb2:	3e01      	subs	r6, #1
 8004eb4:	e707      	b.n	8004cc6 <__kernel_rem_pio2+0x2c2>
 8004eb6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	dc09      	bgt.n	8004ed0 <__kernel_rem_pio2+0x4cc>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dc32      	bgt.n	8004f26 <__kernel_rem_pio2+0x522>
 8004ec0:	d05a      	beq.n	8004f78 <__kernel_rem_pio2+0x574>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	f003 0007 	and.w	r0, r3, #7
 8004ec8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d1f5      	bne.n	8004ec2 <__kernel_rem_pio2+0x4be>
 8004ed6:	ab48      	add	r3, sp, #288	; 0x120
 8004ed8:	441d      	add	r5, r3
 8004eda:	46aa      	mov	sl, r5
 8004edc:	46a3      	mov	fp, r4
 8004ede:	f1bb 0f00 	cmp.w	fp, #0
 8004ee2:	dc76      	bgt.n	8004fd2 <__kernel_rem_pio2+0x5ce>
 8004ee4:	46aa      	mov	sl, r5
 8004ee6:	46a3      	mov	fp, r4
 8004ee8:	f1bb 0f01 	cmp.w	fp, #1
 8004eec:	f300 8090 	bgt.w	8005010 <__kernel_rem_pio2+0x60c>
 8004ef0:	2700      	movs	r7, #0
 8004ef2:	463e      	mov	r6, r7
 8004ef4:	2c01      	cmp	r4, #1
 8004ef6:	f300 80aa 	bgt.w	800504e <__kernel_rem_pio2+0x64a>
 8004efa:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004efe:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004f02:	9b00      	ldr	r3, [sp, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 80ac 	bne.w	8005062 <__kernel_rem_pio2+0x65e>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	9806      	ldr	r0, [sp, #24]
 8004f10:	e9c0 2300 	strd	r2, r3, [r0]
 8004f14:	4622      	mov	r2, r4
 8004f16:	460b      	mov	r3, r1
 8004f18:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	4633      	mov	r3, r6
 8004f20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004f24:	e7cd      	b.n	8004ec2 <__kernel_rem_pio2+0x4be>
 8004f26:	2000      	movs	r0, #0
 8004f28:	46a0      	mov	r8, r4
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	ab48      	add	r3, sp, #288	; 0x120
 8004f2e:	441d      	add	r5, r3
 8004f30:	f1b8 0f00 	cmp.w	r8, #0
 8004f34:	da3a      	bge.n	8004fac <__kernel_rem_pio2+0x5a8>
 8004f36:	9b00      	ldr	r3, [sp, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d03e      	beq.n	8004fba <__kernel_rem_pio2+0x5b6>
 8004f3c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004f40:	4602      	mov	r2, r0
 8004f42:	462b      	mov	r3, r5
 8004f44:	9d06      	ldr	r5, [sp, #24]
 8004f46:	2601      	movs	r6, #1
 8004f48:	e9c5 2300 	strd	r2, r3, [r5]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004f52:	f7fb f901 	bl	8000158 <__aeabi_dsub>
 8004f56:	4684      	mov	ip, r0
 8004f58:	460f      	mov	r7, r1
 8004f5a:	ad48      	add	r5, sp, #288	; 0x120
 8004f5c:	42b4      	cmp	r4, r6
 8004f5e:	f105 0508 	add.w	r5, r5, #8
 8004f62:	da2c      	bge.n	8004fbe <__kernel_rem_pio2+0x5ba>
 8004f64:	9b00      	ldr	r3, [sp, #0]
 8004f66:	b10b      	cbz	r3, 8004f6c <__kernel_rem_pio2+0x568>
 8004f68:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f6c:	4662      	mov	r2, ip
 8004f6e:	463b      	mov	r3, r7
 8004f70:	9906      	ldr	r1, [sp, #24]
 8004f72:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004f76:	e7a4      	b.n	8004ec2 <__kernel_rem_pio2+0x4be>
 8004f78:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004f7a:	ab48      	add	r3, sp, #288	; 0x120
 8004f7c:	4637      	mov	r7, r6
 8004f7e:	441d      	add	r5, r3
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	da09      	bge.n	8004f98 <__kernel_rem_pio2+0x594>
 8004f84:	9b00      	ldr	r3, [sp, #0]
 8004f86:	b10b      	cbz	r3, 8004f8c <__kernel_rem_pio2+0x588>
 8004f88:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	463b      	mov	r3, r7
 8004f90:	9906      	ldr	r1, [sp, #24]
 8004f92:	e9c1 2300 	strd	r2, r3, [r1]
 8004f96:	e794      	b.n	8004ec2 <__kernel_rem_pio2+0x4be>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f8dc 	bl	800015c <__adddf3>
 8004fa4:	3c01      	subs	r4, #1
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460f      	mov	r7, r1
 8004faa:	e7e9      	b.n	8004f80 <__kernel_rem_pio2+0x57c>
 8004fac:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004fb0:	f7fb f8d4 	bl	800015c <__adddf3>
 8004fb4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004fb8:	e7ba      	b.n	8004f30 <__kernel_rem_pio2+0x52c>
 8004fba:	460d      	mov	r5, r1
 8004fbc:	e7c0      	b.n	8004f40 <__kernel_rem_pio2+0x53c>
 8004fbe:	4660      	mov	r0, ip
 8004fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f8c9 	bl	800015c <__adddf3>
 8004fca:	3601      	adds	r6, #1
 8004fcc:	4684      	mov	ip, r0
 8004fce:	460f      	mov	r7, r1
 8004fd0:	e7c4      	b.n	8004f5c <__kernel_rem_pio2+0x558>
 8004fd2:	e9da 6700 	ldrd	r6, r7, [sl]
 8004fd6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004fda:	4632      	mov	r2, r6
 8004fdc:	463b      	mov	r3, r7
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f7fb f8bb 	bl	800015c <__adddf3>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fee:	4640      	mov	r0, r8
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	f7fb f8b1 	bl	8000158 <__aeabi_dsub>
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	463b      	mov	r3, r7
 8004ffa:	f7fb f8af 	bl	800015c <__adddf3>
 8004ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005002:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005006:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800500a:	e9ca 2300 	strd	r2, r3, [sl]
 800500e:	e766      	b.n	8004ede <__kernel_rem_pio2+0x4da>
 8005010:	e9da 8900 	ldrd	r8, r9, [sl]
 8005014:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb f89c 	bl	800015c <__adddf3>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502c:	4630      	mov	r0, r6
 800502e:	4639      	mov	r1, r7
 8005030:	f7fb f892 	bl	8000158 <__aeabi_dsub>
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	f7fb f890 	bl	800015c <__adddf3>
 800503c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005040:	e86a 0102 	strd	r0, r1, [sl], #-8
 8005044:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005048:	e9ca 2300 	strd	r2, r3, [sl]
 800504c:	e74c      	b.n	8004ee8 <__kernel_rem_pio2+0x4e4>
 800504e:	4638      	mov	r0, r7
 8005050:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005054:	4631      	mov	r1, r6
 8005056:	f7fb f881 	bl	800015c <__adddf3>
 800505a:	3c01      	subs	r4, #1
 800505c:	4607      	mov	r7, r0
 800505e:	460e      	mov	r6, r1
 8005060:	e748      	b.n	8004ef4 <__kernel_rem_pio2+0x4f0>
 8005062:	9b06      	ldr	r3, [sp, #24]
 8005064:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005068:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800506c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005070:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005074:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005078:	601d      	str	r5, [r3, #0]
 800507a:	615e      	str	r6, [r3, #20]
 800507c:	e721      	b.n	8004ec2 <__kernel_rem_pio2+0x4be>
 800507e:	bf00      	nop
 8005080:	41700000 	.word	0x41700000
 8005084:	3e700000 	.word	0x3e700000

08005088 <__kernel_sin>:
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	b086      	sub	sp, #24
 800508e:	e9cd 2300 	strd	r2, r3, [sp]
 8005092:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005096:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800509a:	4682      	mov	sl, r0
 800509c:	460c      	mov	r4, r1
 800509e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80050a0:	da03      	bge.n	80050aa <__kernel_sin+0x22>
 80050a2:	f7fb fcc1 	bl	8000a28 <__aeabi_d2iz>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d050      	beq.n	800514c <__kernel_sin+0xc4>
 80050aa:	4652      	mov	r2, sl
 80050ac:	4623      	mov	r3, r4
 80050ae:	4650      	mov	r0, sl
 80050b0:	4621      	mov	r1, r4
 80050b2:	f7fb fa09 	bl	80004c8 <__aeabi_dmul>
 80050b6:	4606      	mov	r6, r0
 80050b8:	460f      	mov	r7, r1
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4650      	mov	r0, sl
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7fb fa01 	bl	80004c8 <__aeabi_dmul>
 80050c6:	a33e      	add	r3, pc, #248	; (adr r3, 80051c0 <__kernel_sin+0x138>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	4680      	mov	r8, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	4630      	mov	r0, r6
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb f9f8 	bl	80004c8 <__aeabi_dmul>
 80050d8:	a33b      	add	r3, pc, #236	; (adr r3, 80051c8 <__kernel_sin+0x140>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb f83b 	bl	8000158 <__aeabi_dsub>
 80050e2:	4632      	mov	r2, r6
 80050e4:	463b      	mov	r3, r7
 80050e6:	f7fb f9ef 	bl	80004c8 <__aeabi_dmul>
 80050ea:	a339      	add	r3, pc, #228	; (adr r3, 80051d0 <__kernel_sin+0x148>)
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	f7fb f834 	bl	800015c <__adddf3>
 80050f4:	4632      	mov	r2, r6
 80050f6:	463b      	mov	r3, r7
 80050f8:	f7fb f9e6 	bl	80004c8 <__aeabi_dmul>
 80050fc:	a336      	add	r3, pc, #216	; (adr r3, 80051d8 <__kernel_sin+0x150>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f829 	bl	8000158 <__aeabi_dsub>
 8005106:	4632      	mov	r2, r6
 8005108:	463b      	mov	r3, r7
 800510a:	f7fb f9dd 	bl	80004c8 <__aeabi_dmul>
 800510e:	a334      	add	r3, pc, #208	; (adr r3, 80051e0 <__kernel_sin+0x158>)
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f7fb f822 	bl	800015c <__adddf3>
 8005118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800511c:	b9dd      	cbnz	r5, 8005156 <__kernel_sin+0xce>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	f7fb f9cf 	bl	80004c8 <__aeabi_dmul>
 800512a:	a32f      	add	r3, pc, #188	; (adr r3, 80051e8 <__kernel_sin+0x160>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f812 	bl	8000158 <__aeabi_dsub>
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	f7fb f9c6 	bl	80004c8 <__aeabi_dmul>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4650      	mov	r0, sl
 8005142:	4621      	mov	r1, r4
 8005144:	f7fb f80a 	bl	800015c <__adddf3>
 8005148:	4682      	mov	sl, r0
 800514a:	460c      	mov	r4, r1
 800514c:	4650      	mov	r0, sl
 800514e:	4621      	mov	r1, r4
 8005150:	b006      	add	sp, #24
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	2200      	movs	r2, #0
 8005158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800515c:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <__kernel_sin+0x168>)
 800515e:	f7fb f9b3 	bl	80004c8 <__aeabi_dmul>
 8005162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f9ab 	bl	80004c8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800517a:	f7fa ffed 	bl	8000158 <__aeabi_dsub>
 800517e:	4632      	mov	r2, r6
 8005180:	463b      	mov	r3, r7
 8005182:	f7fb f9a1 	bl	80004c8 <__aeabi_dmul>
 8005186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800518a:	f7fa ffe5 	bl	8000158 <__aeabi_dsub>
 800518e:	a316      	add	r3, pc, #88	; (adr r3, 80051e8 <__kernel_sin+0x160>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	4640      	mov	r0, r8
 800519a:	4649      	mov	r1, r9
 800519c:	f7fb f994 	bl	80004c8 <__aeabi_dmul>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fa ffd8 	bl	800015c <__adddf3>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4650      	mov	r0, sl
 80051b2:	4621      	mov	r1, r4
 80051b4:	f7fa ffd0 	bl	8000158 <__aeabi_dsub>
 80051b8:	e7c6      	b.n	8005148 <__kernel_sin+0xc0>
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w
 80051c0:	5acfd57c 	.word	0x5acfd57c
 80051c4:	3de5d93a 	.word	0x3de5d93a
 80051c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80051cc:	3e5ae5e6 	.word	0x3e5ae5e6
 80051d0:	57b1fe7d 	.word	0x57b1fe7d
 80051d4:	3ec71de3 	.word	0x3ec71de3
 80051d8:	19c161d5 	.word	0x19c161d5
 80051dc:	3f2a01a0 	.word	0x3f2a01a0
 80051e0:	1110f8a6 	.word	0x1110f8a6
 80051e4:	3f811111 	.word	0x3f811111
 80051e8:	55555549 	.word	0x55555549
 80051ec:	3fc55555 	.word	0x3fc55555
 80051f0:	3fe00000 	.word	0x3fe00000

080051f4 <fabs>:
 80051f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80051f8:	4770      	bx	lr
 80051fa:	0000      	movs	r0, r0
 80051fc:	0000      	movs	r0, r0
	...

08005200 <floor>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005208:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800520c:	2e13      	cmp	r6, #19
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4607      	mov	r7, r0
 8005214:	460c      	mov	r4, r1
 8005216:	4605      	mov	r5, r0
 8005218:	dc33      	bgt.n	8005282 <floor+0x82>
 800521a:	2e00      	cmp	r6, #0
 800521c:	da14      	bge.n	8005248 <floor+0x48>
 800521e:	a334      	add	r3, pc, #208	; (adr r3, 80052f0 <floor+0xf0>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fa ff9a 	bl	800015c <__adddf3>
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fbdc 	bl	80009e8 <__aeabi_dcmpgt>
 8005230:	b138      	cbz	r0, 8005242 <floor+0x42>
 8005232:	2c00      	cmp	r4, #0
 8005234:	da58      	bge.n	80052e8 <floor+0xe8>
 8005236:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800523a:	431d      	orrs	r5, r3
 800523c:	d001      	beq.n	8005242 <floor+0x42>
 800523e:	2500      	movs	r5, #0
 8005240:	4c2d      	ldr	r4, [pc, #180]	; (80052f8 <floor+0xf8>)
 8005242:	4623      	mov	r3, r4
 8005244:	462f      	mov	r7, r5
 8005246:	e025      	b.n	8005294 <floor+0x94>
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <floor+0xfc>)
 800524a:	fa42 f806 	asr.w	r8, r2, r6
 800524e:	ea01 0208 	and.w	r2, r1, r8
 8005252:	4302      	orrs	r2, r0
 8005254:	d01e      	beq.n	8005294 <floor+0x94>
 8005256:	a326      	add	r3, pc, #152	; (adr r3, 80052f0 <floor+0xf0>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fa ff7e 	bl	800015c <__adddf3>
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	f7fb fbc0 	bl	80009e8 <__aeabi_dcmpgt>
 8005268:	2800      	cmp	r0, #0
 800526a:	d0ea      	beq.n	8005242 <floor+0x42>
 800526c:	2c00      	cmp	r4, #0
 800526e:	bfbe      	ittt	lt
 8005270:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005274:	fa43 f606 	asrlt.w	r6, r3, r6
 8005278:	19a4      	addlt	r4, r4, r6
 800527a:	2500      	movs	r5, #0
 800527c:	ea24 0408 	bic.w	r4, r4, r8
 8005280:	e7df      	b.n	8005242 <floor+0x42>
 8005282:	2e33      	cmp	r6, #51	; 0x33
 8005284:	dd0a      	ble.n	800529c <floor+0x9c>
 8005286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800528a:	d103      	bne.n	8005294 <floor+0x94>
 800528c:	f7fa ff66 	bl	800015c <__adddf3>
 8005290:	4607      	mov	r7, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4638      	mov	r0, r7
 8005296:	4619      	mov	r1, r3
 8005298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80052a4:	fa22 f808 	lsr.w	r8, r2, r8
 80052a8:	ea18 0f00 	tst.w	r8, r0
 80052ac:	d0f2      	beq.n	8005294 <floor+0x94>
 80052ae:	a310      	add	r3, pc, #64	; (adr r3, 80052f0 <floor+0xf0>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fa ff52 	bl	800015c <__adddf3>
 80052b8:	2200      	movs	r2, #0
 80052ba:	2300      	movs	r3, #0
 80052bc:	f7fb fb94 	bl	80009e8 <__aeabi_dcmpgt>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0be      	beq.n	8005242 <floor+0x42>
 80052c4:	2c00      	cmp	r4, #0
 80052c6:	da02      	bge.n	80052ce <floor+0xce>
 80052c8:	2e14      	cmp	r6, #20
 80052ca:	d103      	bne.n	80052d4 <floor+0xd4>
 80052cc:	3401      	adds	r4, #1
 80052ce:	ea25 0508 	bic.w	r5, r5, r8
 80052d2:	e7b6      	b.n	8005242 <floor+0x42>
 80052d4:	2301      	movs	r3, #1
 80052d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80052da:	fa03 f606 	lsl.w	r6, r3, r6
 80052de:	4435      	add	r5, r6
 80052e0:	42bd      	cmp	r5, r7
 80052e2:	bf38      	it	cc
 80052e4:	18e4      	addcc	r4, r4, r3
 80052e6:	e7f2      	b.n	80052ce <floor+0xce>
 80052e8:	2500      	movs	r5, #0
 80052ea:	462c      	mov	r4, r5
 80052ec:	e7a9      	b.n	8005242 <floor+0x42>
 80052ee:	bf00      	nop
 80052f0:	8800759c 	.word	0x8800759c
 80052f4:	7e37e43c 	.word	0x7e37e43c
 80052f8:	bff00000 	.word	0xbff00000
 80052fc:	000fffff 	.word	0x000fffff

08005300 <nan>:
 8005300:	2000      	movs	r0, #0
 8005302:	4901      	ldr	r1, [pc, #4]	; (8005308 <nan+0x8>)
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	7ff80000 	.word	0x7ff80000
 800530c:	00000000 	.word	0x00000000

08005310 <scalbn>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	4617      	mov	r7, r2
 800531c:	460b      	mov	r3, r1
 800531e:	b996      	cbnz	r6, 8005346 <scalbn+0x36>
 8005320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005324:	4303      	orrs	r3, r0
 8005326:	d039      	beq.n	800539c <scalbn+0x8c>
 8005328:	4b33      	ldr	r3, [pc, #204]	; (80053f8 <scalbn+0xe8>)
 800532a:	2200      	movs	r2, #0
 800532c:	f7fb f8cc 	bl	80004c8 <__aeabi_dmul>
 8005330:	4b32      	ldr	r3, [pc, #200]	; (80053fc <scalbn+0xec>)
 8005332:	4604      	mov	r4, r0
 8005334:	429f      	cmp	r7, r3
 8005336:	460d      	mov	r5, r1
 8005338:	da0f      	bge.n	800535a <scalbn+0x4a>
 800533a:	a32b      	add	r3, pc, #172	; (adr r3, 80053e8 <scalbn+0xd8>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f8c2 	bl	80004c8 <__aeabi_dmul>
 8005344:	e006      	b.n	8005354 <scalbn+0x44>
 8005346:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800534a:	4296      	cmp	r6, r2
 800534c:	d10a      	bne.n	8005364 <scalbn+0x54>
 800534e:	4602      	mov	r2, r0
 8005350:	f7fa ff04 	bl	800015c <__adddf3>
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	e020      	b.n	800539c <scalbn+0x8c>
 800535a:	460b      	mov	r3, r1
 800535c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005360:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005364:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005368:	19b9      	adds	r1, r7, r6
 800536a:	4291      	cmp	r1, r2
 800536c:	dd0e      	ble.n	800538c <scalbn+0x7c>
 800536e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005372:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005376:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800537a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800537e:	4820      	ldr	r0, [pc, #128]	; (8005400 <scalbn+0xf0>)
 8005380:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005384:	a31a      	add	r3, pc, #104	; (adr r3, 80053f0 <scalbn+0xe0>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	e7d9      	b.n	8005340 <scalbn+0x30>
 800538c:	2900      	cmp	r1, #0
 800538e:	dd08      	ble.n	80053a2 <scalbn+0x92>
 8005390:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005394:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005398:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800539c:	4620      	mov	r0, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80053a6:	da12      	bge.n	80053ce <scalbn+0xbe>
 80053a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80053ac:	429f      	cmp	r7, r3
 80053ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80053b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80053b6:	dcdc      	bgt.n	8005372 <scalbn+0x62>
 80053b8:	a30b      	add	r3, pc, #44	; (adr r3, 80053e8 <scalbn+0xd8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80053c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80053c6:	480f      	ldr	r0, [pc, #60]	; (8005404 <scalbn+0xf4>)
 80053c8:	f041 011f 	orr.w	r1, r1, #31
 80053cc:	e7b8      	b.n	8005340 <scalbn+0x30>
 80053ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053d2:	3136      	adds	r1, #54	; 0x36
 80053d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80053dc:	4620      	mov	r0, r4
 80053de:	4629      	mov	r1, r5
 80053e0:	2200      	movs	r2, #0
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <scalbn+0xf8>)
 80053e4:	e7ac      	b.n	8005340 <scalbn+0x30>
 80053e6:	bf00      	nop
 80053e8:	c2f8f359 	.word	0xc2f8f359
 80053ec:	01a56e1f 	.word	0x01a56e1f
 80053f0:	8800759c 	.word	0x8800759c
 80053f4:	7e37e43c 	.word	0x7e37e43c
 80053f8:	43500000 	.word	0x43500000
 80053fc:	ffff3cb0 	.word	0xffff3cb0
 8005400:	8800759c 	.word	0x8800759c
 8005404:	c2f8f359 	.word	0xc2f8f359
 8005408:	3c900000 	.word	0x3c900000

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
